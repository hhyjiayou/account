// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account_open.proto

#ifndef PROTOBUF_account_5fopen_2eproto__INCLUDED
#define PROTOBUF_account_5fopen_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "account.pb.h"
// @@protoc_insertion_point(includes)

namespace zhibo_open {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_account_5fopen_2eproto();
void protobuf_AssignDesc_account_5fopen_2eproto();
void protobuf_ShutdownFile_account_5fopen_2eproto();

class GetAccessTokenByCodeReq;
class GetAccessTokenByCodeRsp;
class GetAccessTokenAndBaseInfoByCodeReq;
class GetAccessTokenAndBaseInfoByCodeRsp;
class VerifyAccessTokenReq;
class VerifyAccessTokenRsp;
class GetOpenProfileReq;
class GetOpenProfileRsp;

// ===================================================================

class GetAccessTokenByCodeReq : public ::google::protobuf::Message {
 public:
  GetAccessTokenByCodeReq();
  virtual ~GetAccessTokenByCodeReq();

  GetAccessTokenByCodeReq(const GetAccessTokenByCodeReq& from);

  inline GetAccessTokenByCodeReq& operator=(const GetAccessTokenByCodeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccessTokenByCodeReq& default_instance();

  void Swap(GetAccessTokenByCodeReq* other);

  // implements Message ----------------------------------------------

  GetAccessTokenByCodeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccessTokenByCodeReq& from);
  void MergeFrom(const GetAccessTokenByCodeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 account_type = 1;
  inline bool has_account_type() const;
  inline void clear_account_type();
  static const int kAccountTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 account_type() const;
  inline void set_account_type(::google::protobuf::uint32 value);

  // required string code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string appid = 3 [default = "10007"];
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // @@protoc_insertion_point(class_scope:zhibo_open.GetAccessTokenByCodeReq)
 private:
  inline void set_has_account_type();
  inline void clear_has_account_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_appid();
  inline void clear_has_appid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  static ::std::string* _default_appid_;
  ::std::string* appid_;
  ::google::protobuf::uint32 account_type_;
  friend void  protobuf_AddDesc_account_5fopen_2eproto();
  friend void protobuf_AssignDesc_account_5fopen_2eproto();
  friend void protobuf_ShutdownFile_account_5fopen_2eproto();

  void InitAsDefaultInstance();
  static GetAccessTokenByCodeReq* default_instance_;
};
// -------------------------------------------------------------------

class GetAccessTokenByCodeRsp : public ::google::protobuf::Message {
 public:
  GetAccessTokenByCodeRsp();
  virtual ~GetAccessTokenByCodeRsp();

  GetAccessTokenByCodeRsp(const GetAccessTokenByCodeRsp& from);

  inline GetAccessTokenByCodeRsp& operator=(const GetAccessTokenByCodeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccessTokenByCodeRsp& default_instance();

  void Swap(GetAccessTokenByCodeRsp* other);

  // implements Message ----------------------------------------------

  GetAccessTokenByCodeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccessTokenByCodeRsp& from);
  void MergeFrom(const GetAccessTokenByCodeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 retCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional .zhibo_account.OpenAccountInfo open_account_info = 2;
  inline bool has_open_account_info() const;
  inline void clear_open_account_info();
  static const int kOpenAccountInfoFieldNumber = 2;
  inline const ::zhibo_account::OpenAccountInfo& open_account_info() const;
  inline ::zhibo_account::OpenAccountInfo* mutable_open_account_info();
  inline ::zhibo_account::OpenAccountInfo* release_open_account_info();
  inline void set_allocated_open_account_info(::zhibo_account::OpenAccountInfo* open_account_info);

  // @@protoc_insertion_point(class_scope:zhibo_open.GetAccessTokenByCodeRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_open_account_info();
  inline void clear_has_open_account_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::zhibo_account::OpenAccountInfo* open_account_info_;
  ::google::protobuf::uint32 retcode_;
  friend void  protobuf_AddDesc_account_5fopen_2eproto();
  friend void protobuf_AssignDesc_account_5fopen_2eproto();
  friend void protobuf_ShutdownFile_account_5fopen_2eproto();

  void InitAsDefaultInstance();
  static GetAccessTokenByCodeRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetAccessTokenAndBaseInfoByCodeReq : public ::google::protobuf::Message {
 public:
  GetAccessTokenAndBaseInfoByCodeReq();
  virtual ~GetAccessTokenAndBaseInfoByCodeReq();

  GetAccessTokenAndBaseInfoByCodeReq(const GetAccessTokenAndBaseInfoByCodeReq& from);

  inline GetAccessTokenAndBaseInfoByCodeReq& operator=(const GetAccessTokenAndBaseInfoByCodeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccessTokenAndBaseInfoByCodeReq& default_instance();

  void Swap(GetAccessTokenAndBaseInfoByCodeReq* other);

  // implements Message ----------------------------------------------

  GetAccessTokenAndBaseInfoByCodeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccessTokenAndBaseInfoByCodeReq& from);
  void MergeFrom(const GetAccessTokenAndBaseInfoByCodeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 account_type = 1;
  inline bool has_account_type() const;
  inline void clear_account_type();
  static const int kAccountTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 account_type() const;
  inline void set_account_type(::google::protobuf::uint32 value);

  // required string code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string appid = 3 [default = "10007"];
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // @@protoc_insertion_point(class_scope:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
 private:
  inline void set_has_account_type();
  inline void clear_has_account_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_appid();
  inline void clear_has_appid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  static ::std::string* _default_appid_;
  ::std::string* appid_;
  ::google::protobuf::uint32 account_type_;
  friend void  protobuf_AddDesc_account_5fopen_2eproto();
  friend void protobuf_AssignDesc_account_5fopen_2eproto();
  friend void protobuf_ShutdownFile_account_5fopen_2eproto();

  void InitAsDefaultInstance();
  static GetAccessTokenAndBaseInfoByCodeReq* default_instance_;
};
// -------------------------------------------------------------------

class GetAccessTokenAndBaseInfoByCodeRsp : public ::google::protobuf::Message {
 public:
  GetAccessTokenAndBaseInfoByCodeRsp();
  virtual ~GetAccessTokenAndBaseInfoByCodeRsp();

  GetAccessTokenAndBaseInfoByCodeRsp(const GetAccessTokenAndBaseInfoByCodeRsp& from);

  inline GetAccessTokenAndBaseInfoByCodeRsp& operator=(const GetAccessTokenAndBaseInfoByCodeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccessTokenAndBaseInfoByCodeRsp& default_instance();

  void Swap(GetAccessTokenAndBaseInfoByCodeRsp* other);

  // implements Message ----------------------------------------------

  GetAccessTokenAndBaseInfoByCodeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccessTokenAndBaseInfoByCodeRsp& from);
  void MergeFrom(const GetAccessTokenAndBaseInfoByCodeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 retCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional .zhibo_account.OpenAccountInfo open_account_info = 2;
  inline bool has_open_account_info() const;
  inline void clear_open_account_info();
  static const int kOpenAccountInfoFieldNumber = 2;
  inline const ::zhibo_account::OpenAccountInfo& open_account_info() const;
  inline ::zhibo_account::OpenAccountInfo* mutable_open_account_info();
  inline ::zhibo_account::OpenAccountInfo* release_open_account_info();
  inline void set_allocated_open_account_info(::zhibo_account::OpenAccountInfo* open_account_info);

  // optional .zhibo_account.OuterProfile outer_profile = 3;
  inline bool has_outer_profile() const;
  inline void clear_outer_profile();
  static const int kOuterProfileFieldNumber = 3;
  inline const ::zhibo_account::OuterProfile& outer_profile() const;
  inline ::zhibo_account::OuterProfile* mutable_outer_profile();
  inline ::zhibo_account::OuterProfile* release_outer_profile();
  inline void set_allocated_outer_profile(::zhibo_account::OuterProfile* outer_profile);

  // @@protoc_insertion_point(class_scope:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_open_account_info();
  inline void clear_has_open_account_info();
  inline void set_has_outer_profile();
  inline void clear_has_outer_profile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::zhibo_account::OpenAccountInfo* open_account_info_;
  ::zhibo_account::OuterProfile* outer_profile_;
  ::google::protobuf::uint32 retcode_;
  friend void  protobuf_AddDesc_account_5fopen_2eproto();
  friend void protobuf_AssignDesc_account_5fopen_2eproto();
  friend void protobuf_ShutdownFile_account_5fopen_2eproto();

  void InitAsDefaultInstance();
  static GetAccessTokenAndBaseInfoByCodeRsp* default_instance_;
};
// -------------------------------------------------------------------

class VerifyAccessTokenReq : public ::google::protobuf::Message {
 public:
  VerifyAccessTokenReq();
  virtual ~VerifyAccessTokenReq();

  VerifyAccessTokenReq(const VerifyAccessTokenReq& from);

  inline VerifyAccessTokenReq& operator=(const VerifyAccessTokenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyAccessTokenReq& default_instance();

  void Swap(VerifyAccessTokenReq* other);

  // implements Message ----------------------------------------------

  VerifyAccessTokenReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyAccessTokenReq& from);
  void MergeFrom(const VerifyAccessTokenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 account_type = 1;
  inline bool has_account_type() const;
  inline void clear_account_type();
  static const int kAccountTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 account_type() const;
  inline void set_account_type(::google::protobuf::uint32 value);

  // required string accessToken = 2;
  inline bool has_accesstoken() const;
  inline void clear_accesstoken();
  static const int kAccessTokenFieldNumber = 2;
  inline const ::std::string& accesstoken() const;
  inline void set_accesstoken(const ::std::string& value);
  inline void set_accesstoken(const char* value);
  inline void set_accesstoken(const char* value, size_t size);
  inline ::std::string* mutable_accesstoken();
  inline ::std::string* release_accesstoken();
  inline void set_allocated_accesstoken(::std::string* accesstoken);

  // required string openId = 3;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIdFieldNumber = 3;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional string appid = 4 [default = "10007"];
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 4;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // @@protoc_insertion_point(class_scope:zhibo_open.VerifyAccessTokenReq)
 private:
  inline void set_has_account_type();
  inline void clear_has_account_type();
  inline void set_has_accesstoken();
  inline void clear_has_accesstoken();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_appid();
  inline void clear_has_appid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* accesstoken_;
  ::std::string* openid_;
  static ::std::string* _default_appid_;
  ::std::string* appid_;
  ::google::protobuf::uint32 account_type_;
  friend void  protobuf_AddDesc_account_5fopen_2eproto();
  friend void protobuf_AssignDesc_account_5fopen_2eproto();
  friend void protobuf_ShutdownFile_account_5fopen_2eproto();

  void InitAsDefaultInstance();
  static VerifyAccessTokenReq* default_instance_;
};
// -------------------------------------------------------------------

class VerifyAccessTokenRsp : public ::google::protobuf::Message {
 public:
  VerifyAccessTokenRsp();
  virtual ~VerifyAccessTokenRsp();

  VerifyAccessTokenRsp(const VerifyAccessTokenRsp& from);

  inline VerifyAccessTokenRsp& operator=(const VerifyAccessTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyAccessTokenRsp& default_instance();

  void Swap(VerifyAccessTokenRsp* other);

  // implements Message ----------------------------------------------

  VerifyAccessTokenRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyAccessTokenRsp& from);
  void MergeFrom(const VerifyAccessTokenRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 retCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional string unionId = 2;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionIdFieldNumber = 2;
  inline const ::std::string& unionid() const;
  inline void set_unionid(const ::std::string& value);
  inline void set_unionid(const char* value);
  inline void set_unionid(const char* value, size_t size);
  inline ::std::string* mutable_unionid();
  inline ::std::string* release_unionid();
  inline void set_allocated_unionid(::std::string* unionid);

  // @@protoc_insertion_point(class_scope:zhibo_open.VerifyAccessTokenRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_unionid();
  inline void clear_has_unionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* unionid_;
  ::google::protobuf::uint32 retcode_;
  friend void  protobuf_AddDesc_account_5fopen_2eproto();
  friend void protobuf_AssignDesc_account_5fopen_2eproto();
  friend void protobuf_ShutdownFile_account_5fopen_2eproto();

  void InitAsDefaultInstance();
  static VerifyAccessTokenRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetOpenProfileReq : public ::google::protobuf::Message {
 public:
  GetOpenProfileReq();
  virtual ~GetOpenProfileReq();

  GetOpenProfileReq(const GetOpenProfileReq& from);

  inline GetOpenProfileReq& operator=(const GetOpenProfileReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOpenProfileReq& default_instance();

  void Swap(GetOpenProfileReq* other);

  // implements Message ----------------------------------------------

  GetOpenProfileReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetOpenProfileReq& from);
  void MergeFrom(const GetOpenProfileReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 account_type = 1;
  inline bool has_account_type() const;
  inline void clear_account_type();
  static const int kAccountTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 account_type() const;
  inline void set_account_type(::google::protobuf::uint32 value);

  // required string accessToken = 2;
  inline bool has_accesstoken() const;
  inline void clear_accesstoken();
  static const int kAccessTokenFieldNumber = 2;
  inline const ::std::string& accesstoken() const;
  inline void set_accesstoken(const ::std::string& value);
  inline void set_accesstoken(const char* value);
  inline void set_accesstoken(const char* value, size_t size);
  inline ::std::string* mutable_accesstoken();
  inline ::std::string* release_accesstoken();
  inline void set_allocated_accesstoken(::std::string* accesstoken);

  // optional string openId = 3;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIdFieldNumber = 3;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional string appid = 4 [default = "10007"];
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 4;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // @@protoc_insertion_point(class_scope:zhibo_open.GetOpenProfileReq)
 private:
  inline void set_has_account_type();
  inline void clear_has_account_type();
  inline void set_has_accesstoken();
  inline void clear_has_accesstoken();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_appid();
  inline void clear_has_appid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* accesstoken_;
  ::std::string* openid_;
  static ::std::string* _default_appid_;
  ::std::string* appid_;
  ::google::protobuf::uint32 account_type_;
  friend void  protobuf_AddDesc_account_5fopen_2eproto();
  friend void protobuf_AssignDesc_account_5fopen_2eproto();
  friend void protobuf_ShutdownFile_account_5fopen_2eproto();

  void InitAsDefaultInstance();
  static GetOpenProfileReq* default_instance_;
};
// -------------------------------------------------------------------

class GetOpenProfileRsp : public ::google::protobuf::Message {
 public:
  GetOpenProfileRsp();
  virtual ~GetOpenProfileRsp();

  GetOpenProfileRsp(const GetOpenProfileRsp& from);

  inline GetOpenProfileRsp& operator=(const GetOpenProfileRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOpenProfileRsp& default_instance();

  void Swap(GetOpenProfileRsp* other);

  // implements Message ----------------------------------------------

  GetOpenProfileRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetOpenProfileRsp& from);
  void MergeFrom(const GetOpenProfileRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 retCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional .zhibo_account.OuterProfile outerProfile = 2;
  inline bool has_outerprofile() const;
  inline void clear_outerprofile();
  static const int kOuterProfileFieldNumber = 2;
  inline const ::zhibo_account::OuterProfile& outerprofile() const;
  inline ::zhibo_account::OuterProfile* mutable_outerprofile();
  inline ::zhibo_account::OuterProfile* release_outerprofile();
  inline void set_allocated_outerprofile(::zhibo_account::OuterProfile* outerprofile);

  // @@protoc_insertion_point(class_scope:zhibo_open.GetOpenProfileRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_outerprofile();
  inline void clear_has_outerprofile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::zhibo_account::OuterProfile* outerprofile_;
  ::google::protobuf::uint32 retcode_;
  friend void  protobuf_AddDesc_account_5fopen_2eproto();
  friend void protobuf_AssignDesc_account_5fopen_2eproto();
  friend void protobuf_ShutdownFile_account_5fopen_2eproto();

  void InitAsDefaultInstance();
  static GetOpenProfileRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// GetAccessTokenByCodeReq

// required uint32 account_type = 1;
inline bool GetAccessTokenByCodeReq::has_account_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccessTokenByCodeReq::set_has_account_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccessTokenByCodeReq::clear_has_account_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccessTokenByCodeReq::clear_account_type() {
  account_type_ = 0u;
  clear_has_account_type();
}
inline ::google::protobuf::uint32 GetAccessTokenByCodeReq::account_type() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenByCodeReq.account_type)
  return account_type_;
}
inline void GetAccessTokenByCodeReq::set_account_type(::google::protobuf::uint32 value) {
  set_has_account_type();
  account_type_ = value;
  // @@protoc_insertion_point(field_set:zhibo_open.GetAccessTokenByCodeReq.account_type)
}

// required string code = 2;
inline bool GetAccessTokenByCodeReq::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccessTokenByCodeReq::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccessTokenByCodeReq::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccessTokenByCodeReq::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& GetAccessTokenByCodeReq::code() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenByCodeReq.code)
  return *code_;
}
inline void GetAccessTokenByCodeReq::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.GetAccessTokenByCodeReq.code)
}
inline void GetAccessTokenByCodeReq::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.GetAccessTokenByCodeReq.code)
}
inline void GetAccessTokenByCodeReq::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.GetAccessTokenByCodeReq.code)
}
inline ::std::string* GetAccessTokenByCodeReq::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetAccessTokenByCodeReq.code)
  return code_;
}
inline ::std::string* GetAccessTokenByCodeReq::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetAccessTokenByCodeReq::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetAccessTokenByCodeReq.code)
}

// optional string appid = 3 [default = "10007"];
inline bool GetAccessTokenByCodeReq::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAccessTokenByCodeReq::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAccessTokenByCodeReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAccessTokenByCodeReq::clear_appid() {
  if (appid_ != _default_appid_) {
    appid_->assign(*_default_appid_);
  }
  clear_has_appid();
}
inline const ::std::string& GetAccessTokenByCodeReq::appid() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenByCodeReq.appid)
  return *appid_;
}
inline void GetAccessTokenByCodeReq::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.GetAccessTokenByCodeReq.appid)
}
inline void GetAccessTokenByCodeReq::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.GetAccessTokenByCodeReq.appid)
}
inline void GetAccessTokenByCodeReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.GetAccessTokenByCodeReq.appid)
}
inline ::std::string* GetAccessTokenByCodeReq::mutable_appid() {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string(*_default_appid_);
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetAccessTokenByCodeReq.appid)
  return appid_;
}
inline ::std::string* GetAccessTokenByCodeReq::release_appid() {
  clear_has_appid();
  if (appid_ == _default_appid_) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(_default_appid_);
    return temp;
  }
}
inline void GetAccessTokenByCodeReq::set_allocated_appid(::std::string* appid) {
  if (appid_ != _default_appid_) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(_default_appid_);
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetAccessTokenByCodeReq.appid)
}

// -------------------------------------------------------------------

// GetAccessTokenByCodeRsp

// required uint32 retCode = 1;
inline bool GetAccessTokenByCodeRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccessTokenByCodeRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccessTokenByCodeRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccessTokenByCodeRsp::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 GetAccessTokenByCodeRsp::retcode() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenByCodeRsp.retCode)
  return retcode_;
}
inline void GetAccessTokenByCodeRsp::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:zhibo_open.GetAccessTokenByCodeRsp.retCode)
}

// optional .zhibo_account.OpenAccountInfo open_account_info = 2;
inline bool GetAccessTokenByCodeRsp::has_open_account_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccessTokenByCodeRsp::set_has_open_account_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccessTokenByCodeRsp::clear_has_open_account_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccessTokenByCodeRsp::clear_open_account_info() {
  if (open_account_info_ != NULL) open_account_info_->::zhibo_account::OpenAccountInfo::Clear();
  clear_has_open_account_info();
}
inline const ::zhibo_account::OpenAccountInfo& GetAccessTokenByCodeRsp::open_account_info() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenByCodeRsp.open_account_info)
  return open_account_info_ != NULL ? *open_account_info_ : *default_instance_->open_account_info_;
}
inline ::zhibo_account::OpenAccountInfo* GetAccessTokenByCodeRsp::mutable_open_account_info() {
  set_has_open_account_info();
  if (open_account_info_ == NULL) open_account_info_ = new ::zhibo_account::OpenAccountInfo;
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetAccessTokenByCodeRsp.open_account_info)
  return open_account_info_;
}
inline ::zhibo_account::OpenAccountInfo* GetAccessTokenByCodeRsp::release_open_account_info() {
  clear_has_open_account_info();
  ::zhibo_account::OpenAccountInfo* temp = open_account_info_;
  open_account_info_ = NULL;
  return temp;
}
inline void GetAccessTokenByCodeRsp::set_allocated_open_account_info(::zhibo_account::OpenAccountInfo* open_account_info) {
  delete open_account_info_;
  open_account_info_ = open_account_info;
  if (open_account_info) {
    set_has_open_account_info();
  } else {
    clear_has_open_account_info();
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetAccessTokenByCodeRsp.open_account_info)
}

// -------------------------------------------------------------------

// GetAccessTokenAndBaseInfoByCodeReq

// required uint32 account_type = 1;
inline bool GetAccessTokenAndBaseInfoByCodeReq::has_account_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_has_account_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::clear_has_account_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::clear_account_type() {
  account_type_ = 0u;
  clear_has_account_type();
}
inline ::google::protobuf::uint32 GetAccessTokenAndBaseInfoByCodeReq::account_type() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.account_type)
  return account_type_;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_account_type(::google::protobuf::uint32 value) {
  set_has_account_type();
  account_type_ = value;
  // @@protoc_insertion_point(field_set:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.account_type)
}

// required string code = 2;
inline bool GetAccessTokenAndBaseInfoByCodeReq::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& GetAccessTokenAndBaseInfoByCodeReq::code() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.code)
  return *code_;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.code)
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.code)
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.code)
}
inline ::std::string* GetAccessTokenAndBaseInfoByCodeReq::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.code)
  return code_;
}
inline ::std::string* GetAccessTokenAndBaseInfoByCodeReq::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.code)
}

// optional string appid = 3 [default = "10007"];
inline bool GetAccessTokenAndBaseInfoByCodeReq::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::clear_appid() {
  if (appid_ != _default_appid_) {
    appid_->assign(*_default_appid_);
  }
  clear_has_appid();
}
inline const ::std::string& GetAccessTokenAndBaseInfoByCodeReq::appid() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.appid)
  return *appid_;
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.appid)
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.appid)
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.appid)
}
inline ::std::string* GetAccessTokenAndBaseInfoByCodeReq::mutable_appid() {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string(*_default_appid_);
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.appid)
  return appid_;
}
inline ::std::string* GetAccessTokenAndBaseInfoByCodeReq::release_appid() {
  clear_has_appid();
  if (appid_ == _default_appid_) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(_default_appid_);
    return temp;
  }
}
inline void GetAccessTokenAndBaseInfoByCodeReq::set_allocated_appid(::std::string* appid) {
  if (appid_ != _default_appid_) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(_default_appid_);
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq.appid)
}

// -------------------------------------------------------------------

// GetAccessTokenAndBaseInfoByCodeRsp

// required uint32 retCode = 1;
inline bool GetAccessTokenAndBaseInfoByCodeRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 GetAccessTokenAndBaseInfoByCodeRsp::retcode() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp.retCode)
  return retcode_;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp.retCode)
}

// optional .zhibo_account.OpenAccountInfo open_account_info = 2;
inline bool GetAccessTokenAndBaseInfoByCodeRsp::has_open_account_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::set_has_open_account_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::clear_has_open_account_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::clear_open_account_info() {
  if (open_account_info_ != NULL) open_account_info_->::zhibo_account::OpenAccountInfo::Clear();
  clear_has_open_account_info();
}
inline const ::zhibo_account::OpenAccountInfo& GetAccessTokenAndBaseInfoByCodeRsp::open_account_info() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp.open_account_info)
  return open_account_info_ != NULL ? *open_account_info_ : *default_instance_->open_account_info_;
}
inline ::zhibo_account::OpenAccountInfo* GetAccessTokenAndBaseInfoByCodeRsp::mutable_open_account_info() {
  set_has_open_account_info();
  if (open_account_info_ == NULL) open_account_info_ = new ::zhibo_account::OpenAccountInfo;
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp.open_account_info)
  return open_account_info_;
}
inline ::zhibo_account::OpenAccountInfo* GetAccessTokenAndBaseInfoByCodeRsp::release_open_account_info() {
  clear_has_open_account_info();
  ::zhibo_account::OpenAccountInfo* temp = open_account_info_;
  open_account_info_ = NULL;
  return temp;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::set_allocated_open_account_info(::zhibo_account::OpenAccountInfo* open_account_info) {
  delete open_account_info_;
  open_account_info_ = open_account_info;
  if (open_account_info) {
    set_has_open_account_info();
  } else {
    clear_has_open_account_info();
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp.open_account_info)
}

// optional .zhibo_account.OuterProfile outer_profile = 3;
inline bool GetAccessTokenAndBaseInfoByCodeRsp::has_outer_profile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::set_has_outer_profile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::clear_has_outer_profile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::clear_outer_profile() {
  if (outer_profile_ != NULL) outer_profile_->::zhibo_account::OuterProfile::Clear();
  clear_has_outer_profile();
}
inline const ::zhibo_account::OuterProfile& GetAccessTokenAndBaseInfoByCodeRsp::outer_profile() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp.outer_profile)
  return outer_profile_ != NULL ? *outer_profile_ : *default_instance_->outer_profile_;
}
inline ::zhibo_account::OuterProfile* GetAccessTokenAndBaseInfoByCodeRsp::mutable_outer_profile() {
  set_has_outer_profile();
  if (outer_profile_ == NULL) outer_profile_ = new ::zhibo_account::OuterProfile;
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp.outer_profile)
  return outer_profile_;
}
inline ::zhibo_account::OuterProfile* GetAccessTokenAndBaseInfoByCodeRsp::release_outer_profile() {
  clear_has_outer_profile();
  ::zhibo_account::OuterProfile* temp = outer_profile_;
  outer_profile_ = NULL;
  return temp;
}
inline void GetAccessTokenAndBaseInfoByCodeRsp::set_allocated_outer_profile(::zhibo_account::OuterProfile* outer_profile) {
  delete outer_profile_;
  outer_profile_ = outer_profile;
  if (outer_profile) {
    set_has_outer_profile();
  } else {
    clear_has_outer_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp.outer_profile)
}

// -------------------------------------------------------------------

// VerifyAccessTokenReq

// required uint32 account_type = 1;
inline bool VerifyAccessTokenReq::has_account_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyAccessTokenReq::set_has_account_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyAccessTokenReq::clear_has_account_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyAccessTokenReq::clear_account_type() {
  account_type_ = 0u;
  clear_has_account_type();
}
inline ::google::protobuf::uint32 VerifyAccessTokenReq::account_type() const {
  // @@protoc_insertion_point(field_get:zhibo_open.VerifyAccessTokenReq.account_type)
  return account_type_;
}
inline void VerifyAccessTokenReq::set_account_type(::google::protobuf::uint32 value) {
  set_has_account_type();
  account_type_ = value;
  // @@protoc_insertion_point(field_set:zhibo_open.VerifyAccessTokenReq.account_type)
}

// required string accessToken = 2;
inline bool VerifyAccessTokenReq::has_accesstoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyAccessTokenReq::set_has_accesstoken() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyAccessTokenReq::clear_has_accesstoken() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyAccessTokenReq::clear_accesstoken() {
  if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_->clear();
  }
  clear_has_accesstoken();
}
inline const ::std::string& VerifyAccessTokenReq::accesstoken() const {
  // @@protoc_insertion_point(field_get:zhibo_open.VerifyAccessTokenReq.accessToken)
  return *accesstoken_;
}
inline void VerifyAccessTokenReq::set_accesstoken(const ::std::string& value) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.VerifyAccessTokenReq.accessToken)
}
inline void VerifyAccessTokenReq::set_accesstoken(const char* value) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.VerifyAccessTokenReq.accessToken)
}
inline void VerifyAccessTokenReq::set_accesstoken(const char* value, size_t size) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.VerifyAccessTokenReq.accessToken)
}
inline ::std::string* VerifyAccessTokenReq::mutable_accesstoken() {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.VerifyAccessTokenReq.accessToken)
  return accesstoken_;
}
inline ::std::string* VerifyAccessTokenReq::release_accesstoken() {
  clear_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accesstoken_;
    accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyAccessTokenReq::set_allocated_accesstoken(::std::string* accesstoken) {
  if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accesstoken_;
  }
  if (accesstoken) {
    set_has_accesstoken();
    accesstoken_ = accesstoken;
  } else {
    clear_has_accesstoken();
    accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.VerifyAccessTokenReq.accessToken)
}

// required string openId = 3;
inline bool VerifyAccessTokenReq::has_openid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyAccessTokenReq::set_has_openid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyAccessTokenReq::clear_has_openid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyAccessTokenReq::clear_openid() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& VerifyAccessTokenReq::openid() const {
  // @@protoc_insertion_point(field_get:zhibo_open.VerifyAccessTokenReq.openId)
  return *openid_;
}
inline void VerifyAccessTokenReq::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.VerifyAccessTokenReq.openId)
}
inline void VerifyAccessTokenReq::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.VerifyAccessTokenReq.openId)
}
inline void VerifyAccessTokenReq::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.VerifyAccessTokenReq.openId)
}
inline ::std::string* VerifyAccessTokenReq::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.VerifyAccessTokenReq.openId)
  return openid_;
}
inline ::std::string* VerifyAccessTokenReq::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyAccessTokenReq::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.VerifyAccessTokenReq.openId)
}

// optional string appid = 4 [default = "10007"];
inline bool VerifyAccessTokenReq::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyAccessTokenReq::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyAccessTokenReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyAccessTokenReq::clear_appid() {
  if (appid_ != _default_appid_) {
    appid_->assign(*_default_appid_);
  }
  clear_has_appid();
}
inline const ::std::string& VerifyAccessTokenReq::appid() const {
  // @@protoc_insertion_point(field_get:zhibo_open.VerifyAccessTokenReq.appid)
  return *appid_;
}
inline void VerifyAccessTokenReq::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.VerifyAccessTokenReq.appid)
}
inline void VerifyAccessTokenReq::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.VerifyAccessTokenReq.appid)
}
inline void VerifyAccessTokenReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.VerifyAccessTokenReq.appid)
}
inline ::std::string* VerifyAccessTokenReq::mutable_appid() {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string(*_default_appid_);
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.VerifyAccessTokenReq.appid)
  return appid_;
}
inline ::std::string* VerifyAccessTokenReq::release_appid() {
  clear_has_appid();
  if (appid_ == _default_appid_) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(_default_appid_);
    return temp;
  }
}
inline void VerifyAccessTokenReq::set_allocated_appid(::std::string* appid) {
  if (appid_ != _default_appid_) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(_default_appid_);
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.VerifyAccessTokenReq.appid)
}

// -------------------------------------------------------------------

// VerifyAccessTokenRsp

// required uint32 retCode = 1;
inline bool VerifyAccessTokenRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyAccessTokenRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyAccessTokenRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyAccessTokenRsp::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 VerifyAccessTokenRsp::retcode() const {
  // @@protoc_insertion_point(field_get:zhibo_open.VerifyAccessTokenRsp.retCode)
  return retcode_;
}
inline void VerifyAccessTokenRsp::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:zhibo_open.VerifyAccessTokenRsp.retCode)
}

// optional string unionId = 2;
inline bool VerifyAccessTokenRsp::has_unionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyAccessTokenRsp::set_has_unionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyAccessTokenRsp::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyAccessTokenRsp::clear_unionid() {
  if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unionid_->clear();
  }
  clear_has_unionid();
}
inline const ::std::string& VerifyAccessTokenRsp::unionid() const {
  // @@protoc_insertion_point(field_get:zhibo_open.VerifyAccessTokenRsp.unionId)
  return *unionid_;
}
inline void VerifyAccessTokenRsp::set_unionid(const ::std::string& value) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.VerifyAccessTokenRsp.unionId)
}
inline void VerifyAccessTokenRsp::set_unionid(const char* value) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.VerifyAccessTokenRsp.unionId)
}
inline void VerifyAccessTokenRsp::set_unionid(const char* value, size_t size) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.VerifyAccessTokenRsp.unionId)
}
inline ::std::string* VerifyAccessTokenRsp::mutable_unionid() {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unionid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.VerifyAccessTokenRsp.unionId)
  return unionid_;
}
inline ::std::string* VerifyAccessTokenRsp::release_unionid() {
  clear_has_unionid();
  if (unionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unionid_;
    unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyAccessTokenRsp::set_allocated_unionid(::std::string* unionid) {
  if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unionid_;
  }
  if (unionid) {
    set_has_unionid();
    unionid_ = unionid;
  } else {
    clear_has_unionid();
    unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.VerifyAccessTokenRsp.unionId)
}

// -------------------------------------------------------------------

// GetOpenProfileReq

// required uint32 account_type = 1;
inline bool GetOpenProfileReq::has_account_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetOpenProfileReq::set_has_account_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetOpenProfileReq::clear_has_account_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetOpenProfileReq::clear_account_type() {
  account_type_ = 0u;
  clear_has_account_type();
}
inline ::google::protobuf::uint32 GetOpenProfileReq::account_type() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetOpenProfileReq.account_type)
  return account_type_;
}
inline void GetOpenProfileReq::set_account_type(::google::protobuf::uint32 value) {
  set_has_account_type();
  account_type_ = value;
  // @@protoc_insertion_point(field_set:zhibo_open.GetOpenProfileReq.account_type)
}

// required string accessToken = 2;
inline bool GetOpenProfileReq::has_accesstoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetOpenProfileReq::set_has_accesstoken() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetOpenProfileReq::clear_has_accesstoken() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetOpenProfileReq::clear_accesstoken() {
  if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_->clear();
  }
  clear_has_accesstoken();
}
inline const ::std::string& GetOpenProfileReq::accesstoken() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetOpenProfileReq.accessToken)
  return *accesstoken_;
}
inline void GetOpenProfileReq::set_accesstoken(const ::std::string& value) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.GetOpenProfileReq.accessToken)
}
inline void GetOpenProfileReq::set_accesstoken(const char* value) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.GetOpenProfileReq.accessToken)
}
inline void GetOpenProfileReq::set_accesstoken(const char* value, size_t size) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.GetOpenProfileReq.accessToken)
}
inline ::std::string* GetOpenProfileReq::mutable_accesstoken() {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetOpenProfileReq.accessToken)
  return accesstoken_;
}
inline ::std::string* GetOpenProfileReq::release_accesstoken() {
  clear_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accesstoken_;
    accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetOpenProfileReq::set_allocated_accesstoken(::std::string* accesstoken) {
  if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accesstoken_;
  }
  if (accesstoken) {
    set_has_accesstoken();
    accesstoken_ = accesstoken;
  } else {
    clear_has_accesstoken();
    accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetOpenProfileReq.accessToken)
}

// optional string openId = 3;
inline bool GetOpenProfileReq::has_openid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetOpenProfileReq::set_has_openid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetOpenProfileReq::clear_has_openid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetOpenProfileReq::clear_openid() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& GetOpenProfileReq::openid() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetOpenProfileReq.openId)
  return *openid_;
}
inline void GetOpenProfileReq::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.GetOpenProfileReq.openId)
}
inline void GetOpenProfileReq::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.GetOpenProfileReq.openId)
}
inline void GetOpenProfileReq::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.GetOpenProfileReq.openId)
}
inline ::std::string* GetOpenProfileReq::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetOpenProfileReq.openId)
  return openid_;
}
inline ::std::string* GetOpenProfileReq::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetOpenProfileReq::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetOpenProfileReq.openId)
}

// optional string appid = 4 [default = "10007"];
inline bool GetOpenProfileReq::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetOpenProfileReq::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetOpenProfileReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetOpenProfileReq::clear_appid() {
  if (appid_ != _default_appid_) {
    appid_->assign(*_default_appid_);
  }
  clear_has_appid();
}
inline const ::std::string& GetOpenProfileReq::appid() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetOpenProfileReq.appid)
  return *appid_;
}
inline void GetOpenProfileReq::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set:zhibo_open.GetOpenProfileReq.appid)
}
inline void GetOpenProfileReq::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set_char:zhibo_open.GetOpenProfileReq.appid)
}
inline void GetOpenProfileReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zhibo_open.GetOpenProfileReq.appid)
}
inline ::std::string* GetOpenProfileReq::mutable_appid() {
  set_has_appid();
  if (appid_ == _default_appid_) {
    appid_ = new ::std::string(*_default_appid_);
  }
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetOpenProfileReq.appid)
  return appid_;
}
inline ::std::string* GetOpenProfileReq::release_appid() {
  clear_has_appid();
  if (appid_ == _default_appid_) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(_default_appid_);
    return temp;
  }
}
inline void GetOpenProfileReq::set_allocated_appid(::std::string* appid) {
  if (appid_ != _default_appid_) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(_default_appid_);
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetOpenProfileReq.appid)
}

// -------------------------------------------------------------------

// GetOpenProfileRsp

// required uint32 retCode = 1;
inline bool GetOpenProfileRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetOpenProfileRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetOpenProfileRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetOpenProfileRsp::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 GetOpenProfileRsp::retcode() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetOpenProfileRsp.retCode)
  return retcode_;
}
inline void GetOpenProfileRsp::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:zhibo_open.GetOpenProfileRsp.retCode)
}

// optional .zhibo_account.OuterProfile outerProfile = 2;
inline bool GetOpenProfileRsp::has_outerprofile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetOpenProfileRsp::set_has_outerprofile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetOpenProfileRsp::clear_has_outerprofile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetOpenProfileRsp::clear_outerprofile() {
  if (outerprofile_ != NULL) outerprofile_->::zhibo_account::OuterProfile::Clear();
  clear_has_outerprofile();
}
inline const ::zhibo_account::OuterProfile& GetOpenProfileRsp::outerprofile() const {
  // @@protoc_insertion_point(field_get:zhibo_open.GetOpenProfileRsp.outerProfile)
  return outerprofile_ != NULL ? *outerprofile_ : *default_instance_->outerprofile_;
}
inline ::zhibo_account::OuterProfile* GetOpenProfileRsp::mutable_outerprofile() {
  set_has_outerprofile();
  if (outerprofile_ == NULL) outerprofile_ = new ::zhibo_account::OuterProfile;
  // @@protoc_insertion_point(field_mutable:zhibo_open.GetOpenProfileRsp.outerProfile)
  return outerprofile_;
}
inline ::zhibo_account::OuterProfile* GetOpenProfileRsp::release_outerprofile() {
  clear_has_outerprofile();
  ::zhibo_account::OuterProfile* temp = outerprofile_;
  outerprofile_ = NULL;
  return temp;
}
inline void GetOpenProfileRsp::set_allocated_outerprofile(::zhibo_account::OuterProfile* outerprofile) {
  delete outerprofile_;
  outerprofile_ = outerprofile;
  if (outerprofile) {
    set_has_outerprofile();
  } else {
    clear_has_outerprofile();
  }
  // @@protoc_insertion_point(field_set_allocated:zhibo_open.GetOpenProfileRsp.outerProfile)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zhibo_open

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_account_5fopen_2eproto__INCLUDED
