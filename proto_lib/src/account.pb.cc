// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zhibo_account {

namespace {

const ::google::protobuf::Descriptor* OuterProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OuterProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* TokenBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenAccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenAccountInfoStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenAccountInfoStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassTokenStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassTokenStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PwdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PwdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WxOldUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WxOldUserInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_account_2eproto() {
  protobuf_AddDesc_account_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "account.proto");
  GOOGLE_CHECK(file != NULL);
  OuterProfile_descriptor_ = file->message_type(0);
  static const int OuterProfile_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterProfile, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterProfile, headimgurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterProfile, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterProfile, certification_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterProfile, certification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterProfile, uid_),
  };
  OuterProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OuterProfile_descriptor_,
      OuterProfile::default_instance_,
      OuterProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OuterProfile));
  TokenBox_descriptor_ = file->message_type(1);
  static const int TokenBox_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenBox, passtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenBox, servicetoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenBox, securitykey_),
  };
  TokenBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenBox_descriptor_,
      TokenBox::default_instance_,
      TokenBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenBox));
  PassToken_descriptor_ = file->message_type(2);
  static const int PassToken_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassToken, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassToken, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassToken, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassToken, create_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassToken, nonce_),
  };
  PassToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassToken_descriptor_,
      PassToken::default_instance_,
      PassToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassToken));
  ServiceToken_descriptor_ = file->message_type(3);
  static const int ServiceToken_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceToken, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceToken, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceToken, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceToken, create_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceToken, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceToken, securitykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceToken, appid_),
  };
  ServiceToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceToken_descriptor_,
      ServiceToken::default_instance_,
      ServiceToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceToken));
  OpenAccountInfo_descriptor_ = file->message_type(4);
  static const int OpenAccountInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfo, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfo, expires_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfo, token_update_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfo, refresh_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfo, unionid_),
  };
  OpenAccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenAccountInfo_descriptor_,
      OpenAccountInfo::default_instance_,
      OpenAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenAccountInfo));
  AccountInfo_descriptor_ = file->message_type(5);
  static const int AccountInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, create_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, unionid_),
  };
  AccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountInfo_descriptor_,
      AccountInfo::default_instance_,
      AccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountInfo));
  OpenAccountInfoStore_descriptor_ = file->message_type(6);
  static const int OpenAccountInfoStore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfoStore, encrypted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfoStore, keyversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfoStore, data_),
  };
  OpenAccountInfoStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenAccountInfoStore_descriptor_,
      OpenAccountInfoStore::default_instance_,
      OpenAccountInfoStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfoStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAccountInfoStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenAccountInfoStore));
  PassTokenStore_descriptor_ = file->message_type(7);
  static const int PassTokenStore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassTokenStore, encrypted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassTokenStore, keyversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassTokenStore, data_),
  };
  PassTokenStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassTokenStore_descriptor_,
      PassTokenStore::default_instance_,
      PassTokenStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassTokenStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassTokenStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassTokenStore));
  PwdInfo_descriptor_ = file->message_type(8);
  static const int PwdInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PwdInfo, encrypted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PwdInfo, keyversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PwdInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PwdInfo, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PwdInfo, create_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PwdInfo, update_ts_),
  };
  PwdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PwdInfo_descriptor_,
      PwdInfo::default_instance_,
      PwdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PwdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PwdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PwdInfo));
  WxOldUserInfo_descriptor_ = file->message_type(9);
  static const int WxOldUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxOldUserInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxOldUserInfo, counter_),
  };
  WxOldUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WxOldUserInfo_descriptor_,
      WxOldUserInfo::default_instance_,
      WxOldUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxOldUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxOldUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WxOldUserInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_account_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OuterProfile_descriptor_, &OuterProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenBox_descriptor_, &TokenBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassToken_descriptor_, &PassToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceToken_descriptor_, &ServiceToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenAccountInfo_descriptor_, &OpenAccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountInfo_descriptor_, &AccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenAccountInfoStore_descriptor_, &OpenAccountInfoStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassTokenStore_descriptor_, &PassTokenStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PwdInfo_descriptor_, &PwdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WxOldUserInfo_descriptor_, &WxOldUserInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_account_2eproto() {
  delete OuterProfile::default_instance_;
  delete OuterProfile_reflection_;
  delete TokenBox::default_instance_;
  delete TokenBox_reflection_;
  delete PassToken::default_instance_;
  delete PassToken_reflection_;
  delete ServiceToken::default_instance_;
  delete ServiceToken_reflection_;
  delete OpenAccountInfo::default_instance_;
  delete OpenAccountInfo_reflection_;
  delete AccountInfo::default_instance_;
  delete AccountInfo_reflection_;
  delete OpenAccountInfoStore::default_instance_;
  delete OpenAccountInfoStore_reflection_;
  delete PassTokenStore::default_instance_;
  delete PassTokenStore_reflection_;
  delete PwdInfo::default_instance_;
  delete PwdInfo_reflection_;
  delete WxOldUserInfo::default_instance_;
  delete WxOldUserInfo_reflection_;
}

void protobuf_AddDesc_account_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\raccount.proto\022\rzhibo_account\"\201\001\n\014Outer"
    "Profile\022\020\n\010nickname\030\001 \001(\t\022\022\n\nheadimgurl\030"
    "\002 \001(\t\022\013\n\003sex\030\003 \001(\r\022\032\n\022certification_type"
    "\030\004 \001(\r\022\025\n\rcertification\030\005 \001(\t\022\013\n\003uid\030\006 \001"
    "(\t\"H\n\010TokenBox\022\021\n\tpasstoken\030\001 \002(\t\022\024\n\014ser"
    "vicetoken\030\002 \002(\t\022\023\n\013securitykey\030\003 \002(\t\"a\n\t"
    "PassToken\022\017\n\007keyword\030\001 \002(\t\022\013\n\003uid\030\002 \002(\004\022"
    "\024\n\014account_type\030\003 \002(\r\022\021\n\tcreate_ts\030\004 \002(\r"
    "\022\r\n\005nonce\030\005 \002(\r\"\210\001\n\014ServiceToken\022\017\n\007keyw"
    "ord\030\001 \002(\t\022\013\n\003uid\030\002 \002(\004\022\024\n\014account_type\030\003"
    " \002(\r\022\021\n\tcreate_ts\030\004 \002(\r\022\r\n\005nonce\030\005 \002(\r\022\023"
    "\n\013securitykey\030\006 \002(\t\022\r\n\005appid\030\007 \001(\r\"\246\001\n\017O"
    "penAccountInfo\022\020\n\006openid\030\001 \002(\t:\000\022\016\n\003uid\030"
    "\002 \002(\004:\0010\022\026\n\014access_token\030\003 \002(\t:\000\022\025\n\nexpi"
    "res_in\030\004 \002(\r:\0010\022\032\n\017token_update_ts\030\005 \002(\r"
    ":\0010\022\025\n\rrefresh_token\030\006 \001(\t\022\017\n\007unionid\030\007 "
    "\001(\t\"d\n\013AccountInfo\022\013\n\003uid\030\001 \002(\004\022\016\n\006openi"
    "d\030\002 \002(\t\022\024\n\014account_type\030\003 \002(\r\022\021\n\tcreate_"
    "ts\030\004 \002(\004\022\017\n\007unionid\030\005 \001(\t\"K\n\024OpenAccount"
    "InfoStore\022\021\n\tencrypted\030\001 \002(\010\022\022\n\nkeyversi"
    "on\030\002 \002(\r\022\014\n\004data\030\003 \002(\t\"E\n\016PassTokenStore"
    "\022\021\n\tencrypted\030\001 \002(\010\022\022\n\nkeyversion\030\002 \002(\r\022"
    "\014\n\004data\030\003 \002(\t\"p\n\007PwdInfo\022\021\n\tencrypted\030\001 "
    "\002(\010\022\022\n\nkeyversion\030\002 \002(\r\022\013\n\003uid\030\003 \002(\004\022\013\n\003"
    "pwd\030\004 \002(\t\022\021\n\tcreate_ts\030\005 \002(\r\022\021\n\tupdate_t"
    "s\030\006 \002(\r\".\n\rWxOldUserInfo\022\014\n\004uuid\030\001 \002(\004\022\017"
    "\n\007counter\030\002 \001(\r", 1055);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "account.proto", &protobuf_RegisterTypes);
  OuterProfile::default_instance_ = new OuterProfile();
  TokenBox::default_instance_ = new TokenBox();
  PassToken::default_instance_ = new PassToken();
  ServiceToken::default_instance_ = new ServiceToken();
  OpenAccountInfo::default_instance_ = new OpenAccountInfo();
  AccountInfo::default_instance_ = new AccountInfo();
  OpenAccountInfoStore::default_instance_ = new OpenAccountInfoStore();
  PassTokenStore::default_instance_ = new PassTokenStore();
  PwdInfo::default_instance_ = new PwdInfo();
  WxOldUserInfo::default_instance_ = new WxOldUserInfo();
  OuterProfile::default_instance_->InitAsDefaultInstance();
  TokenBox::default_instance_->InitAsDefaultInstance();
  PassToken::default_instance_->InitAsDefaultInstance();
  ServiceToken::default_instance_->InitAsDefaultInstance();
  OpenAccountInfo::default_instance_->InitAsDefaultInstance();
  AccountInfo::default_instance_->InitAsDefaultInstance();
  OpenAccountInfoStore::default_instance_->InitAsDefaultInstance();
  PassTokenStore::default_instance_->InitAsDefaultInstance();
  PwdInfo::default_instance_->InitAsDefaultInstance();
  WxOldUserInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_account_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_account_2eproto {
  StaticDescriptorInitializer_account_2eproto() {
    protobuf_AddDesc_account_2eproto();
  }
} static_descriptor_initializer_account_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OuterProfile::kNicknameFieldNumber;
const int OuterProfile::kHeadimgurlFieldNumber;
const int OuterProfile::kSexFieldNumber;
const int OuterProfile::kCertificationTypeFieldNumber;
const int OuterProfile::kCertificationFieldNumber;
const int OuterProfile::kUidFieldNumber;
#endif  // !_MSC_VER

OuterProfile::OuterProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_account.OuterProfile)
}

void OuterProfile::InitAsDefaultInstance() {
}

OuterProfile::OuterProfile(const OuterProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_account.OuterProfile)
}

void OuterProfile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0u;
  certification_type_ = 0u;
  certification_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OuterProfile::~OuterProfile() {
  // @@protoc_insertion_point(destructor:zhibo_account.OuterProfile)
  SharedDtor();
}

void OuterProfile::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (headimgurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headimgurl_;
  }
  if (certification_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete certification_;
  }
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void OuterProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OuterProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OuterProfile_descriptor_;
}

const OuterProfile& OuterProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

OuterProfile* OuterProfile::default_instance_ = NULL;

OuterProfile* OuterProfile::New() const {
  return new OuterProfile;
}

void OuterProfile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OuterProfile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(sex_, certification_type_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_headimgurl()) {
      if (headimgurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        headimgurl_->clear();
      }
    }
    if (has_certification()) {
      if (certification_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        certification_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OuterProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_account.OuterProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_headimgurl;
        break;
      }

      // optional string headimgurl = 2;
      case 2: {
        if (tag == 18) {
         parse_headimgurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headimgurl().data(), this->headimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "headimgurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_certification_type;
        break;
      }

      // optional uint32 certification_type = 4;
      case 4: {
        if (tag == 32) {
         parse_certification_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &certification_type_)));
          set_has_certification_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_certification;
        break;
      }

      // optional string certification = 5;
      case 5: {
        if (tag == 42) {
         parse_certification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->certification().data(), this->certification().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "certification");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_uid;
        break;
      }

      // optional string uid = 6;
      case 6: {
        if (tag == 50) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_account.OuterProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_account.OuterProfile)
  return false;
#undef DO_
}

void OuterProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_account.OuterProfile)
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // optional string headimgurl = 2;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headimgurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->headimgurl(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional uint32 certification_type = 4;
  if (has_certification_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->certification_type(), output);
  }

  // optional string certification = 5;
  if (has_certification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->certification().data(), this->certification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "certification");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->certification(), output);
  }

  // optional string uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_account.OuterProfile)
}

::google::protobuf::uint8* OuterProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_account.OuterProfile)
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // optional string headimgurl = 2;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headimgurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->headimgurl(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional uint32 certification_type = 4;
  if (has_certification_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->certification_type(), target);
  }

  // optional string certification = 5;
  if (has_certification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->certification().data(), this->certification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "certification");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->certification(), target);
  }

  // optional string uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_account.OuterProfile)
  return target;
}

int OuterProfile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string headimgurl = 2;
    if (has_headimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimgurl());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 certification_type = 4;
    if (has_certification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->certification_type());
    }

    // optional string certification = 5;
    if (has_certification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->certification());
    }

    // optional string uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OuterProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OuterProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OuterProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OuterProfile::MergeFrom(const OuterProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headimgurl()) {
      set_headimgurl(from.headimgurl());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_certification_type()) {
      set_certification_type(from.certification_type());
    }
    if (from.has_certification()) {
      set_certification(from.certification());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OuterProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OuterProfile::CopyFrom(const OuterProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OuterProfile::IsInitialized() const {

  return true;
}

void OuterProfile::Swap(OuterProfile* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(headimgurl_, other->headimgurl_);
    std::swap(sex_, other->sex_);
    std::swap(certification_type_, other->certification_type_);
    std::swap(certification_, other->certification_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OuterProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OuterProfile_descriptor_;
  metadata.reflection = OuterProfile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TokenBox::kPasstokenFieldNumber;
const int TokenBox::kServicetokenFieldNumber;
const int TokenBox::kSecuritykeyFieldNumber;
#endif  // !_MSC_VER

TokenBox::TokenBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_account.TokenBox)
}

void TokenBox::InitAsDefaultInstance() {
}

TokenBox::TokenBox(const TokenBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_account.TokenBox)
}

void TokenBox::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  passtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicetoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenBox::~TokenBox() {
  // @@protoc_insertion_point(destructor:zhibo_account.TokenBox)
  SharedDtor();
}

void TokenBox::SharedDtor() {
  if (passtoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passtoken_;
  }
  if (servicetoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicetoken_;
  }
  if (securitykey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete securitykey_;
  }
  if (this != default_instance_) {
  }
}

void TokenBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenBox_descriptor_;
}

const TokenBox& TokenBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

TokenBox* TokenBox::default_instance_ = NULL;

TokenBox* TokenBox::New() const {
  return new TokenBox;
}

void TokenBox::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_passtoken()) {
      if (passtoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passtoken_->clear();
      }
    }
    if (has_servicetoken()) {
      if (servicetoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servicetoken_->clear();
      }
    }
    if (has_securitykey()) {
      if (securitykey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        securitykey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_account.TokenBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string passtoken = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passtoken().data(), this->passtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passtoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_servicetoken;
        break;
      }

      // required string servicetoken = 2;
      case 2: {
        if (tag == 18) {
         parse_servicetoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicetoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servicetoken().data(), this->servicetoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servicetoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_securitykey;
        break;
      }

      // required string securitykey = 3;
      case 3: {
        if (tag == 26) {
         parse_securitykey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->securitykey().data(), this->securitykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "securitykey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_account.TokenBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_account.TokenBox)
  return false;
#undef DO_
}

void TokenBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_account.TokenBox)
  // required string passtoken = 1;
  if (has_passtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passtoken().data(), this->passtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passtoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->passtoken(), output);
  }

  // required string servicetoken = 2;
  if (has_servicetoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicetoken().data(), this->servicetoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicetoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->servicetoken(), output);
  }

  // required string securitykey = 3;
  if (has_securitykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitykey().data(), this->securitykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "securitykey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->securitykey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_account.TokenBox)
}

::google::protobuf::uint8* TokenBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_account.TokenBox)
  // required string passtoken = 1;
  if (has_passtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passtoken().data(), this->passtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passtoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->passtoken(), target);
  }

  // required string servicetoken = 2;
  if (has_servicetoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicetoken().data(), this->servicetoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicetoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servicetoken(), target);
  }

  // required string securitykey = 3;
  if (has_securitykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitykey().data(), this->securitykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "securitykey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->securitykey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_account.TokenBox)
  return target;
}

int TokenBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string passtoken = 1;
    if (has_passtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passtoken());
    }

    // required string servicetoken = 2;
    if (has_servicetoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servicetoken());
    }

    // required string securitykey = 3;
    if (has_securitykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitykey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenBox::MergeFrom(const TokenBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passtoken()) {
      set_passtoken(from.passtoken());
    }
    if (from.has_servicetoken()) {
      set_servicetoken(from.servicetoken());
    }
    if (from.has_securitykey()) {
      set_securitykey(from.securitykey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenBox::CopyFrom(const TokenBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TokenBox::Swap(TokenBox* other) {
  if (other != this) {
    std::swap(passtoken_, other->passtoken_);
    std::swap(servicetoken_, other->servicetoken_);
    std::swap(securitykey_, other->securitykey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenBox_descriptor_;
  metadata.reflection = TokenBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassToken::kKeywordFieldNumber;
const int PassToken::kUidFieldNumber;
const int PassToken::kAccountTypeFieldNumber;
const int PassToken::kCreateTsFieldNumber;
const int PassToken::kNonceFieldNumber;
#endif  // !_MSC_VER

PassToken::PassToken()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_account.PassToken)
}

void PassToken::InitAsDefaultInstance() {
}

PassToken::PassToken(const PassToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_account.PassToken)
}

void PassToken::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_ULONGLONG(0);
  account_type_ = 0u;
  create_ts_ = 0u;
  nonce_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassToken::~PassToken() {
  // @@protoc_insertion_point(destructor:zhibo_account.PassToken)
  SharedDtor();
}

void PassToken::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (this != default_instance_) {
  }
}

void PassToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassToken_descriptor_;
}

const PassToken& PassToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

PassToken* PassToken::default_instance_ = NULL;

PassToken* PassToken::New() const {
  return new PassToken;
}

void PassToken::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PassToken*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, nonce_);
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keyword_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_account.PassToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyword = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_account_type;
        break;
      }

      // required uint32 account_type = 3;
      case 3: {
        if (tag == 24) {
         parse_account_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_create_ts;
        break;
      }

      // required uint32 create_ts = 4;
      case 4: {
        if (tag == 32) {
         parse_create_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_ts_)));
          set_has_create_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nonce;
        break;
      }

      // required uint32 nonce = 5;
      case 5: {
        if (tag == 40) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_account.PassToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_account.PassToken)
  return false;
#undef DO_
}

void PassToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_account.PassToken)
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyword(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required uint32 account_type = 3;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_type(), output);
  }

  // required uint32 create_ts = 4;
  if (has_create_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_ts(), output);
  }

  // required uint32 nonce = 5;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_account.PassToken)
}

::google::protobuf::uint8* PassToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_account.PassToken)
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyword(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required uint32 account_type = 3;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_type(), target);
  }

  // required uint32 create_ts = 4;
  if (has_create_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->create_ts(), target);
  }

  // required uint32 nonce = 5;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_account.PassToken)
  return target;
}

int PassToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyword = 1;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required uint32 account_type = 3;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // required uint32 create_ts = 4;
    if (has_create_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_ts());
    }

    // required uint32 nonce = 5;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassToken::MergeFrom(const PassToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_create_ts()) {
      set_create_ts(from.create_ts());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassToken::CopyFrom(const PassToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PassToken::Swap(PassToken* other) {
  if (other != this) {
    std::swap(keyword_, other->keyword_);
    std::swap(uid_, other->uid_);
    std::swap(account_type_, other->account_type_);
    std::swap(create_ts_, other->create_ts_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassToken_descriptor_;
  metadata.reflection = PassToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceToken::kKeywordFieldNumber;
const int ServiceToken::kUidFieldNumber;
const int ServiceToken::kAccountTypeFieldNumber;
const int ServiceToken::kCreateTsFieldNumber;
const int ServiceToken::kNonceFieldNumber;
const int ServiceToken::kSecuritykeyFieldNumber;
const int ServiceToken::kAppidFieldNumber;
#endif  // !_MSC_VER

ServiceToken::ServiceToken()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_account.ServiceToken)
}

void ServiceToken::InitAsDefaultInstance() {
}

ServiceToken::ServiceToken(const ServiceToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_account.ServiceToken)
}

void ServiceToken::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_ULONGLONG(0);
  account_type_ = 0u;
  create_ts_ = 0u;
  nonce_ = 0u;
  securitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceToken::~ServiceToken() {
  // @@protoc_insertion_point(destructor:zhibo_account.ServiceToken)
  SharedDtor();
}

void ServiceToken::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (securitykey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete securitykey_;
  }
  if (this != default_instance_) {
  }
}

void ServiceToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceToken_descriptor_;
}

const ServiceToken& ServiceToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

ServiceToken* ServiceToken::default_instance_ = NULL;

ServiceToken* ServiceToken::New() const {
  return new ServiceToken;
}

void ServiceToken::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServiceToken*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, create_ts_);
    ZR_(nonce_, appid_);
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keyword_->clear();
      }
    }
    if (has_securitykey()) {
      if (securitykey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        securitykey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_account.ServiceToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyword = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_account_type;
        break;
      }

      // required uint32 account_type = 3;
      case 3: {
        if (tag == 24) {
         parse_account_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_create_ts;
        break;
      }

      // required uint32 create_ts = 4;
      case 4: {
        if (tag == 32) {
         parse_create_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_ts_)));
          set_has_create_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nonce;
        break;
      }

      // required uint32 nonce = 5;
      case 5: {
        if (tag == 40) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_securitykey;
        break;
      }

      // required string securitykey = 6;
      case 6: {
        if (tag == 50) {
         parse_securitykey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->securitykey().data(), this->securitykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "securitykey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 7;
      case 7: {
        if (tag == 56) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_account.ServiceToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_account.ServiceToken)
  return false;
#undef DO_
}

void ServiceToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_account.ServiceToken)
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyword(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required uint32 account_type = 3;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_type(), output);
  }

  // required uint32 create_ts = 4;
  if (has_create_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_ts(), output);
  }

  // required uint32 nonce = 5;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nonce(), output);
  }

  // required string securitykey = 6;
  if (has_securitykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitykey().data(), this->securitykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "securitykey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->securitykey(), output);
  }

  // optional uint32 appid = 7;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_account.ServiceToken)
}

::google::protobuf::uint8* ServiceToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_account.ServiceToken)
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyword(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required uint32 account_type = 3;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_type(), target);
  }

  // required uint32 create_ts = 4;
  if (has_create_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->create_ts(), target);
  }

  // required uint32 nonce = 5;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nonce(), target);
  }

  // required string securitykey = 6;
  if (has_securitykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitykey().data(), this->securitykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "securitykey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->securitykey(), target);
  }

  // optional uint32 appid = 7;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_account.ServiceToken)
  return target;
}

int ServiceToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyword = 1;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required uint32 account_type = 3;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // required uint32 create_ts = 4;
    if (has_create_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_ts());
    }

    // required uint32 nonce = 5;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonce());
    }

    // required string securitykey = 6;
    if (has_securitykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitykey());
    }

    // optional uint32 appid = 7;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceToken::MergeFrom(const ServiceToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_create_ts()) {
      set_create_ts(from.create_ts());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_securitykey()) {
      set_securitykey(from.securitykey());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceToken::CopyFrom(const ServiceToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ServiceToken::Swap(ServiceToken* other) {
  if (other != this) {
    std::swap(keyword_, other->keyword_);
    std::swap(uid_, other->uid_);
    std::swap(account_type_, other->account_type_);
    std::swap(create_ts_, other->create_ts_);
    std::swap(nonce_, other->nonce_);
    std::swap(securitykey_, other->securitykey_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceToken_descriptor_;
  metadata.reflection = ServiceToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenAccountInfo::kOpenidFieldNumber;
const int OpenAccountInfo::kUidFieldNumber;
const int OpenAccountInfo::kAccessTokenFieldNumber;
const int OpenAccountInfo::kExpiresInFieldNumber;
const int OpenAccountInfo::kTokenUpdateTsFieldNumber;
const int OpenAccountInfo::kRefreshTokenFieldNumber;
const int OpenAccountInfo::kUnionidFieldNumber;
#endif  // !_MSC_VER

OpenAccountInfo::OpenAccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_account.OpenAccountInfo)
}

void OpenAccountInfo::InitAsDefaultInstance() {
}

OpenAccountInfo::OpenAccountInfo(const OpenAccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_account.OpenAccountInfo)
}

void OpenAccountInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_ULONGLONG(0);
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expires_in_ = 0u;
  token_update_ts_ = 0u;
  refresh_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAccountInfo::~OpenAccountInfo() {
  // @@protoc_insertion_point(destructor:zhibo_account.OpenAccountInfo)
  SharedDtor();
}

void OpenAccountInfo::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (refresh_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete refresh_token_;
  }
  if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unionid_;
  }
  if (this != default_instance_) {
  }
}

void OpenAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenAccountInfo_descriptor_;
}

const OpenAccountInfo& OpenAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

OpenAccountInfo* OpenAccountInfo::default_instance_ = NULL;

OpenAccountInfo* OpenAccountInfo::New() const {
  return new OpenAccountInfo;
}

void OpenAccountInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenAccountInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(expires_in_, token_update_ts_);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_refresh_token()) {
      if (refresh_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        refresh_token_->clear();
      }
    }
    if (has_unionid()) {
      if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unionid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_account.OpenAccountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openid = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_access_token;
        break;
      }

      // required string access_token = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expires_in;
        break;
      }

      // required uint32 expires_in = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_expires_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expires_in_)));
          set_has_expires_in();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_token_update_ts;
        break;
      }

      // required uint32 token_update_ts = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_token_update_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_update_ts_)));
          set_has_token_update_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_refresh_token;
        break;
      }

      // optional string refresh_token = 6;
      case 6: {
        if (tag == 50) {
         parse_refresh_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refresh_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->refresh_token().data(), this->refresh_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "refresh_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_unionid;
        break;
      }

      // optional string unionid = 7;
      case 7: {
        if (tag == 58) {
         parse_unionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unionid().data(), this->unionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unionid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_account.OpenAccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_account.OpenAccountInfo)
  return false;
#undef DO_
}

void OpenAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_account.OpenAccountInfo)
  // required string openid = 1 [default = ""];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->openid(), output);
  }

  // required uint64 uid = 2 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required string access_token = 3 [default = ""];
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->access_token(), output);
  }

  // required uint32 expires_in = 4 [default = 0];
  if (has_expires_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expires_in(), output);
  }

  // required uint32 token_update_ts = 5 [default = 0];
  if (has_token_update_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->token_update_ts(), output);
  }

  // optional string refresh_token = 6;
  if (has_refresh_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refresh_token().data(), this->refresh_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "refresh_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->refresh_token(), output);
  }

  // optional string unionid = 7;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->unionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_account.OpenAccountInfo)
}

::google::protobuf::uint8* OpenAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_account.OpenAccountInfo)
  // required string openid = 1 [default = ""];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // required uint64 uid = 2 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required string access_token = 3 [default = ""];
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->access_token(), target);
  }

  // required uint32 expires_in = 4 [default = 0];
  if (has_expires_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expires_in(), target);
  }

  // required uint32 token_update_ts = 5 [default = 0];
  if (has_token_update_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->token_update_ts(), target);
  }

  // optional string refresh_token = 6;
  if (has_refresh_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refresh_token().data(), this->refresh_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "refresh_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->refresh_token(), target);
  }

  // optional string unionid = 7;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->unionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_account.OpenAccountInfo)
  return target;
}

int OpenAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openid = 1 [default = ""];
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required uint64 uid = 2 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required string access_token = 3 [default = ""];
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // required uint32 expires_in = 4 [default = 0];
    if (has_expires_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expires_in());
    }

    // required uint32 token_update_ts = 5 [default = 0];
    if (has_token_update_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token_update_ts());
    }

    // optional string refresh_token = 6;
    if (has_refresh_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refresh_token());
    }

    // optional string unionid = 7;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenAccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenAccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenAccountInfo::MergeFrom(const OpenAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_expires_in()) {
      set_expires_in(from.expires_in());
    }
    if (from.has_token_update_ts()) {
      set_token_update_ts(from.token_update_ts());
    }
    if (from.has_refresh_token()) {
      set_refresh_token(from.refresh_token());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenAccountInfo::CopyFrom(const OpenAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void OpenAccountInfo::Swap(OpenAccountInfo* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(uid_, other->uid_);
    std::swap(access_token_, other->access_token_);
    std::swap(expires_in_, other->expires_in_);
    std::swap(token_update_ts_, other->token_update_ts_);
    std::swap(refresh_token_, other->refresh_token_);
    std::swap(unionid_, other->unionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenAccountInfo_descriptor_;
  metadata.reflection = OpenAccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountInfo::kUidFieldNumber;
const int AccountInfo::kOpenidFieldNumber;
const int AccountInfo::kAccountTypeFieldNumber;
const int AccountInfo::kCreateTsFieldNumber;
const int AccountInfo::kUnionidFieldNumber;
#endif  // !_MSC_VER

AccountInfo::AccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_account.AccountInfo)
}

void AccountInfo::InitAsDefaultInstance() {
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_account.AccountInfo)
}

void AccountInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_type_ = 0u;
  create_ts_ = GOOGLE_ULONGLONG(0);
  unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountInfo::~AccountInfo() {
  // @@protoc_insertion_point(destructor:zhibo_account.AccountInfo)
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unionid_;
  }
  if (this != default_instance_) {
  }
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountInfo_descriptor_;
}

const AccountInfo& AccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

AccountInfo* AccountInfo::default_instance_ = NULL;

AccountInfo* AccountInfo::New() const {
  return new AccountInfo;
}

void AccountInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    account_type_ = 0u;
    create_ts_ = GOOGLE_ULONGLONG(0);
    if (has_unionid()) {
      if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_account.AccountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // required string openid = 2;
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_account_type;
        break;
      }

      // required uint32 account_type = 3;
      case 3: {
        if (tag == 24) {
         parse_account_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_create_ts;
        break;
      }

      // required uint64 create_ts = 4;
      case 4: {
        if (tag == 32) {
         parse_create_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_ts_)));
          set_has_create_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unionid;
        break;
      }

      // optional string unionid = 5;
      case 5: {
        if (tag == 42) {
         parse_unionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unionid().data(), this->unionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unionid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_account.AccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_account.AccountInfo)
  return false;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_account.AccountInfo)
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openid(), output);
  }

  // required uint32 account_type = 3;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_type(), output);
  }

  // required uint64 create_ts = 4;
  if (has_create_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->create_ts(), output);
  }

  // optional string unionid = 5;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->unionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_account.AccountInfo)
}

::google::protobuf::uint8* AccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_account.AccountInfo)
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // required uint32 account_type = 3;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_type(), target);
  }

  // required uint64 create_ts = 4;
  if (has_create_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->create_ts(), target);
  }

  // optional string unionid = 5;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->unionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_account.AccountInfo)
  return target;
}

int AccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required uint32 account_type = 3;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // required uint64 create_ts = 4;
    if (has_create_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_ts());
    }

    // optional string unionid = 5;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_create_ts()) {
      set_create_ts(from.create_ts());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(openid_, other->openid_);
    std::swap(account_type_, other->account_type_);
    std::swap(create_ts_, other->create_ts_);
    std::swap(unionid_, other->unionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountInfo_descriptor_;
  metadata.reflection = AccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenAccountInfoStore::kEncryptedFieldNumber;
const int OpenAccountInfoStore::kKeyversionFieldNumber;
const int OpenAccountInfoStore::kDataFieldNumber;
#endif  // !_MSC_VER

OpenAccountInfoStore::OpenAccountInfoStore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_account.OpenAccountInfoStore)
}

void OpenAccountInfoStore::InitAsDefaultInstance() {
}

OpenAccountInfoStore::OpenAccountInfoStore(const OpenAccountInfoStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_account.OpenAccountInfoStore)
}

void OpenAccountInfoStore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  encrypted_ = false;
  keyversion_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAccountInfoStore::~OpenAccountInfoStore() {
  // @@protoc_insertion_point(destructor:zhibo_account.OpenAccountInfoStore)
  SharedDtor();
}

void OpenAccountInfoStore::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void OpenAccountInfoStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenAccountInfoStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenAccountInfoStore_descriptor_;
}

const OpenAccountInfoStore& OpenAccountInfoStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

OpenAccountInfoStore* OpenAccountInfoStore::default_instance_ = NULL;

OpenAccountInfoStore* OpenAccountInfoStore::New() const {
  return new OpenAccountInfoStore;
}

void OpenAccountInfoStore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenAccountInfoStore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(encrypted_, keyversion_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenAccountInfoStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_account.OpenAccountInfoStore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool encrypted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
          set_has_encrypted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_keyversion;
        break;
      }

      // required uint32 keyversion = 2;
      case 2: {
        if (tag == 16) {
         parse_keyversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyversion_)));
          set_has_keyversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_account.OpenAccountInfoStore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_account.OpenAccountInfoStore)
  return false;
#undef DO_
}

void OpenAccountInfoStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_account.OpenAccountInfoStore)
  // required bool encrypted = 1;
  if (has_encrypted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->encrypted(), output);
  }

  // required uint32 keyversion = 2;
  if (has_keyversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->keyversion(), output);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_account.OpenAccountInfoStore)
}

::google::protobuf::uint8* OpenAccountInfoStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_account.OpenAccountInfoStore)
  // required bool encrypted = 1;
  if (has_encrypted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->encrypted(), target);
  }

  // required uint32 keyversion = 2;
  if (has_keyversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->keyversion(), target);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_account.OpenAccountInfoStore)
  return target;
}

int OpenAccountInfoStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool encrypted = 1;
    if (has_encrypted()) {
      total_size += 1 + 1;
    }

    // required uint32 keyversion = 2;
    if (has_keyversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keyversion());
    }

    // required string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAccountInfoStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenAccountInfoStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenAccountInfoStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenAccountInfoStore::MergeFrom(const OpenAccountInfoStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrypted()) {
      set_encrypted(from.encrypted());
    }
    if (from.has_keyversion()) {
      set_keyversion(from.keyversion());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenAccountInfoStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenAccountInfoStore::CopyFrom(const OpenAccountInfoStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAccountInfoStore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OpenAccountInfoStore::Swap(OpenAccountInfoStore* other) {
  if (other != this) {
    std::swap(encrypted_, other->encrypted_);
    std::swap(keyversion_, other->keyversion_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenAccountInfoStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenAccountInfoStore_descriptor_;
  metadata.reflection = OpenAccountInfoStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassTokenStore::kEncryptedFieldNumber;
const int PassTokenStore::kKeyversionFieldNumber;
const int PassTokenStore::kDataFieldNumber;
#endif  // !_MSC_VER

PassTokenStore::PassTokenStore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_account.PassTokenStore)
}

void PassTokenStore::InitAsDefaultInstance() {
}

PassTokenStore::PassTokenStore(const PassTokenStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_account.PassTokenStore)
}

void PassTokenStore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  encrypted_ = false;
  keyversion_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassTokenStore::~PassTokenStore() {
  // @@protoc_insertion_point(destructor:zhibo_account.PassTokenStore)
  SharedDtor();
}

void PassTokenStore::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PassTokenStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassTokenStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassTokenStore_descriptor_;
}

const PassTokenStore& PassTokenStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

PassTokenStore* PassTokenStore::default_instance_ = NULL;

PassTokenStore* PassTokenStore::New() const {
  return new PassTokenStore;
}

void PassTokenStore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PassTokenStore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(encrypted_, keyversion_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassTokenStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_account.PassTokenStore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool encrypted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
          set_has_encrypted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_keyversion;
        break;
      }

      // required uint32 keyversion = 2;
      case 2: {
        if (tag == 16) {
         parse_keyversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyversion_)));
          set_has_keyversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_account.PassTokenStore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_account.PassTokenStore)
  return false;
#undef DO_
}

void PassTokenStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_account.PassTokenStore)
  // required bool encrypted = 1;
  if (has_encrypted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->encrypted(), output);
  }

  // required uint32 keyversion = 2;
  if (has_keyversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->keyversion(), output);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_account.PassTokenStore)
}

::google::protobuf::uint8* PassTokenStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_account.PassTokenStore)
  // required bool encrypted = 1;
  if (has_encrypted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->encrypted(), target);
  }

  // required uint32 keyversion = 2;
  if (has_keyversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->keyversion(), target);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_account.PassTokenStore)
  return target;
}

int PassTokenStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool encrypted = 1;
    if (has_encrypted()) {
      total_size += 1 + 1;
    }

    // required uint32 keyversion = 2;
    if (has_keyversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keyversion());
    }

    // required string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassTokenStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassTokenStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassTokenStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassTokenStore::MergeFrom(const PassTokenStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrypted()) {
      set_encrypted(from.encrypted());
    }
    if (from.has_keyversion()) {
      set_keyversion(from.keyversion());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassTokenStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassTokenStore::CopyFrom(const PassTokenStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassTokenStore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PassTokenStore::Swap(PassTokenStore* other) {
  if (other != this) {
    std::swap(encrypted_, other->encrypted_);
    std::swap(keyversion_, other->keyversion_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassTokenStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassTokenStore_descriptor_;
  metadata.reflection = PassTokenStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PwdInfo::kEncryptedFieldNumber;
const int PwdInfo::kKeyversionFieldNumber;
const int PwdInfo::kUidFieldNumber;
const int PwdInfo::kPwdFieldNumber;
const int PwdInfo::kCreateTsFieldNumber;
const int PwdInfo::kUpdateTsFieldNumber;
#endif  // !_MSC_VER

PwdInfo::PwdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_account.PwdInfo)
}

void PwdInfo::InitAsDefaultInstance() {
}

PwdInfo::PwdInfo(const PwdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_account.PwdInfo)
}

void PwdInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  encrypted_ = false;
  keyversion_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_ts_ = 0u;
  update_ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PwdInfo::~PwdInfo() {
  // @@protoc_insertion_point(destructor:zhibo_account.PwdInfo)
  SharedDtor();
}

void PwdInfo::SharedDtor() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void PwdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PwdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PwdInfo_descriptor_;
}

const PwdInfo& PwdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

PwdInfo* PwdInfo::default_instance_ = NULL;

PwdInfo* PwdInfo::New() const {
  return new PwdInfo;
}

void PwdInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PwdInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(encrypted_, uid_);
    ZR_(create_ts_, update_ts_);
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PwdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_account.PwdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool encrypted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
          set_has_encrypted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_keyversion;
        break;
      }

      // required uint32 keyversion = 2;
      case 2: {
        if (tag == 16) {
         parse_keyversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyversion_)));
          set_has_keyversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint64 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pwd;
        break;
      }

      // required string pwd = 4;
      case 4: {
        if (tag == 34) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_create_ts;
        break;
      }

      // required uint32 create_ts = 5;
      case 5: {
        if (tag == 40) {
         parse_create_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_ts_)));
          set_has_create_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_update_ts;
        break;
      }

      // required uint32 update_ts = 6;
      case 6: {
        if (tag == 48) {
         parse_update_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_ts_)));
          set_has_update_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_account.PwdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_account.PwdInfo)
  return false;
#undef DO_
}

void PwdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_account.PwdInfo)
  // required bool encrypted = 1;
  if (has_encrypted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->encrypted(), output);
  }

  // required uint32 keyversion = 2;
  if (has_keyversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->keyversion(), output);
  }

  // required uint64 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  // required string pwd = 4;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pwd(), output);
  }

  // required uint32 create_ts = 5;
  if (has_create_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->create_ts(), output);
  }

  // required uint32 update_ts = 6;
  if (has_update_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->update_ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_account.PwdInfo)
}

::google::protobuf::uint8* PwdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_account.PwdInfo)
  // required bool encrypted = 1;
  if (has_encrypted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->encrypted(), target);
  }

  // required uint32 keyversion = 2;
  if (has_keyversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->keyversion(), target);
  }

  // required uint64 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  // required string pwd = 4;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pwd(), target);
  }

  // required uint32 create_ts = 5;
  if (has_create_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->create_ts(), target);
  }

  // required uint32 update_ts = 6;
  if (has_update_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->update_ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_account.PwdInfo)
  return target;
}

int PwdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool encrypted = 1;
    if (has_encrypted()) {
      total_size += 1 + 1;
    }

    // required uint32 keyversion = 2;
    if (has_keyversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keyversion());
    }

    // required uint64 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required string pwd = 4;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // required uint32 create_ts = 5;
    if (has_create_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_ts());
    }

    // required uint32 update_ts = 6;
    if (has_update_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PwdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PwdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PwdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PwdInfo::MergeFrom(const PwdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrypted()) {
      set_encrypted(from.encrypted());
    }
    if (from.has_keyversion()) {
      set_keyversion(from.keyversion());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_create_ts()) {
      set_create_ts(from.create_ts());
    }
    if (from.has_update_ts()) {
      set_update_ts(from.update_ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PwdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PwdInfo::CopyFrom(const PwdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PwdInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PwdInfo::Swap(PwdInfo* other) {
  if (other != this) {
    std::swap(encrypted_, other->encrypted_);
    std::swap(keyversion_, other->keyversion_);
    std::swap(uid_, other->uid_);
    std::swap(pwd_, other->pwd_);
    std::swap(create_ts_, other->create_ts_);
    std::swap(update_ts_, other->update_ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PwdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PwdInfo_descriptor_;
  metadata.reflection = PwdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WxOldUserInfo::kUuidFieldNumber;
const int WxOldUserInfo::kCounterFieldNumber;
#endif  // !_MSC_VER

WxOldUserInfo::WxOldUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_account.WxOldUserInfo)
}

void WxOldUserInfo::InitAsDefaultInstance() {
}

WxOldUserInfo::WxOldUserInfo(const WxOldUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_account.WxOldUserInfo)
}

void WxOldUserInfo::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  counter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WxOldUserInfo::~WxOldUserInfo() {
  // @@protoc_insertion_point(destructor:zhibo_account.WxOldUserInfo)
  SharedDtor();
}

void WxOldUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WxOldUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WxOldUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WxOldUserInfo_descriptor_;
}

const WxOldUserInfo& WxOldUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

WxOldUserInfo* WxOldUserInfo::default_instance_ = NULL;

WxOldUserInfo* WxOldUserInfo::New() const {
  return new WxOldUserInfo;
}

void WxOldUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WxOldUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uuid_, counter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WxOldUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_account.WxOldUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_counter;
        break;
      }

      // optional uint32 counter = 2;
      case 2: {
        if (tag == 16) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_account.WxOldUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_account.WxOldUserInfo)
  return false;
#undef DO_
}

void WxOldUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_account.WxOldUserInfo)
  // required uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional uint32 counter = 2;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->counter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_account.WxOldUserInfo)
}

::google::protobuf::uint8* WxOldUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_account.WxOldUserInfo)
  // required uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional uint32 counter = 2;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->counter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_account.WxOldUserInfo)
  return target;
}

int WxOldUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 counter = 2;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WxOldUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WxOldUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WxOldUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WxOldUserInfo::MergeFrom(const WxOldUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_counter()) {
      set_counter(from.counter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WxOldUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WxOldUserInfo::CopyFrom(const WxOldUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WxOldUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WxOldUserInfo::Swap(WxOldUserInfo* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(counter_, other->counter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WxOldUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WxOldUserInfo_descriptor_;
  metadata.reflection = WxOldUserInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zhibo_account

// @@protoc_insertion_point(global_scope)
