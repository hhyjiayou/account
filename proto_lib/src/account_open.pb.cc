// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account_open.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "account_open.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zhibo_open {

namespace {

const ::google::protobuf::Descriptor* GetAccessTokenByCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccessTokenByCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccessTokenByCodeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccessTokenByCodeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccessTokenAndBaseInfoByCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccessTokenAndBaseInfoByCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccessTokenAndBaseInfoByCodeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccessTokenAndBaseInfoByCodeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyAccessTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyAccessTokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyAccessTokenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyAccessTokenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOpenProfileReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOpenProfileReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOpenProfileRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOpenProfileRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_account_5fopen_2eproto() {
  protobuf_AddDesc_account_5fopen_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "account_open.proto");
  GOOGLE_CHECK(file != NULL);
  GetAccessTokenByCodeReq_descriptor_ = file->message_type(0);
  static const int GetAccessTokenByCodeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenByCodeReq, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenByCodeReq, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenByCodeReq, appid_),
  };
  GetAccessTokenByCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccessTokenByCodeReq_descriptor_,
      GetAccessTokenByCodeReq::default_instance_,
      GetAccessTokenByCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenByCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenByCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccessTokenByCodeReq));
  GetAccessTokenByCodeRsp_descriptor_ = file->message_type(1);
  static const int GetAccessTokenByCodeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenByCodeRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenByCodeRsp, open_account_info_),
  };
  GetAccessTokenByCodeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccessTokenByCodeRsp_descriptor_,
      GetAccessTokenByCodeRsp::default_instance_,
      GetAccessTokenByCodeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenByCodeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenByCodeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccessTokenByCodeRsp));
  GetAccessTokenAndBaseInfoByCodeReq_descriptor_ = file->message_type(2);
  static const int GetAccessTokenAndBaseInfoByCodeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenAndBaseInfoByCodeReq, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenAndBaseInfoByCodeReq, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenAndBaseInfoByCodeReq, appid_),
  };
  GetAccessTokenAndBaseInfoByCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccessTokenAndBaseInfoByCodeReq_descriptor_,
      GetAccessTokenAndBaseInfoByCodeReq::default_instance_,
      GetAccessTokenAndBaseInfoByCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenAndBaseInfoByCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenAndBaseInfoByCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccessTokenAndBaseInfoByCodeReq));
  GetAccessTokenAndBaseInfoByCodeRsp_descriptor_ = file->message_type(3);
  static const int GetAccessTokenAndBaseInfoByCodeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenAndBaseInfoByCodeRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenAndBaseInfoByCodeRsp, open_account_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenAndBaseInfoByCodeRsp, outer_profile_),
  };
  GetAccessTokenAndBaseInfoByCodeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccessTokenAndBaseInfoByCodeRsp_descriptor_,
      GetAccessTokenAndBaseInfoByCodeRsp::default_instance_,
      GetAccessTokenAndBaseInfoByCodeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenAndBaseInfoByCodeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccessTokenAndBaseInfoByCodeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccessTokenAndBaseInfoByCodeRsp));
  VerifyAccessTokenReq_descriptor_ = file->message_type(4);
  static const int VerifyAccessTokenReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAccessTokenReq, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAccessTokenReq, accesstoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAccessTokenReq, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAccessTokenReq, appid_),
  };
  VerifyAccessTokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyAccessTokenReq_descriptor_,
      VerifyAccessTokenReq::default_instance_,
      VerifyAccessTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAccessTokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAccessTokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyAccessTokenReq));
  VerifyAccessTokenRsp_descriptor_ = file->message_type(5);
  static const int VerifyAccessTokenRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAccessTokenRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAccessTokenRsp, unionid_),
  };
  VerifyAccessTokenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyAccessTokenRsp_descriptor_,
      VerifyAccessTokenRsp::default_instance_,
      VerifyAccessTokenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAccessTokenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAccessTokenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyAccessTokenRsp));
  GetOpenProfileReq_descriptor_ = file->message_type(6);
  static const int GetOpenProfileReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenProfileReq, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenProfileReq, accesstoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenProfileReq, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenProfileReq, appid_),
  };
  GetOpenProfileReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOpenProfileReq_descriptor_,
      GetOpenProfileReq::default_instance_,
      GetOpenProfileReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenProfileReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenProfileReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOpenProfileReq));
  GetOpenProfileRsp_descriptor_ = file->message_type(7);
  static const int GetOpenProfileRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenProfileRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenProfileRsp, outerprofile_),
  };
  GetOpenProfileRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOpenProfileRsp_descriptor_,
      GetOpenProfileRsp::default_instance_,
      GetOpenProfileRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenProfileRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenProfileRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOpenProfileRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_account_5fopen_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccessTokenByCodeReq_descriptor_, &GetAccessTokenByCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccessTokenByCodeRsp_descriptor_, &GetAccessTokenByCodeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccessTokenAndBaseInfoByCodeReq_descriptor_, &GetAccessTokenAndBaseInfoByCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccessTokenAndBaseInfoByCodeRsp_descriptor_, &GetAccessTokenAndBaseInfoByCodeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyAccessTokenReq_descriptor_, &VerifyAccessTokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyAccessTokenRsp_descriptor_, &VerifyAccessTokenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOpenProfileReq_descriptor_, &GetOpenProfileReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOpenProfileRsp_descriptor_, &GetOpenProfileRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_account_5fopen_2eproto() {
  delete GetAccessTokenByCodeReq::default_instance_;
  delete GetAccessTokenByCodeReq_reflection_;
  delete GetAccessTokenByCodeReq::_default_appid_;
  delete GetAccessTokenByCodeRsp::default_instance_;
  delete GetAccessTokenByCodeRsp_reflection_;
  delete GetAccessTokenAndBaseInfoByCodeReq::default_instance_;
  delete GetAccessTokenAndBaseInfoByCodeReq_reflection_;
  delete GetAccessTokenAndBaseInfoByCodeReq::_default_appid_;
  delete GetAccessTokenAndBaseInfoByCodeRsp::default_instance_;
  delete GetAccessTokenAndBaseInfoByCodeRsp_reflection_;
  delete VerifyAccessTokenReq::default_instance_;
  delete VerifyAccessTokenReq_reflection_;
  delete VerifyAccessTokenReq::_default_appid_;
  delete VerifyAccessTokenRsp::default_instance_;
  delete VerifyAccessTokenRsp_reflection_;
  delete GetOpenProfileReq::default_instance_;
  delete GetOpenProfileReq_reflection_;
  delete GetOpenProfileReq::_default_appid_;
  delete GetOpenProfileRsp::default_instance_;
  delete GetOpenProfileRsp_reflection_;
}

void protobuf_AddDesc_account_5fopen_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::zhibo_account::protobuf_AddDesc_account_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022account_open.proto\022\nzhibo_open\032\raccoun"
    "t.proto\"S\n\027GetAccessTokenByCodeReq\022\024\n\014ac"
    "count_type\030\001 \002(\r\022\014\n\004code\030\002 \002(\t\022\024\n\005appid\030"
    "\003 \001(\t:\00510007\"e\n\027GetAccessTokenByCodeRsp\022"
    "\017\n\007retCode\030\001 \002(\r\0229\n\021open_account_info\030\002 "
    "\001(\0132\036.zhibo_account.OpenAccountInfo\"^\n\"G"
    "etAccessTokenAndBaseInfoByCodeReq\022\024\n\014acc"
    "ount_type\030\001 \002(\r\022\014\n\004code\030\002 \002(\t\022\024\n\005appid\030\003"
    " \001(\t:\00510007\"\244\001\n\"GetAccessTokenAndBaseInf"
    "oByCodeRsp\022\017\n\007retCode\030\001 \002(\r\0229\n\021open_acco"
    "unt_info\030\002 \001(\0132\036.zhibo_account.OpenAccou"
    "ntInfo\0222\n\router_profile\030\003 \001(\0132\033.zhibo_ac"
    "count.OuterProfile\"g\n\024VerifyAccessTokenR"
    "eq\022\024\n\014account_type\030\001 \002(\r\022\023\n\013accessToken\030"
    "\002 \002(\t\022\016\n\006openId\030\003 \002(\t\022\024\n\005appid\030\004 \001(\t:\00510"
    "007\"8\n\024VerifyAccessTokenRsp\022\017\n\007retCode\030\001"
    " \002(\r\022\017\n\007unionId\030\002 \001(\t\"d\n\021GetOpenProfileR"
    "eq\022\024\n\014account_type\030\001 \002(\r\022\023\n\013accessToken\030"
    "\002 \002(\t\022\016\n\006openId\030\003 \001(\t\022\024\n\005appid\030\004 \001(\t:\00510"
    "007\"W\n\021GetOpenProfileRsp\022\017\n\007retCode\030\001 \002("
    "\r\0221\n\014outerProfile\030\002 \001(\0132\033.zhibo_account."
    "OuterProfile", 852);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "account_open.proto", &protobuf_RegisterTypes);
  GetAccessTokenByCodeReq::_default_appid_ =
      new ::std::string("10007", 5);
  GetAccessTokenByCodeReq::default_instance_ = new GetAccessTokenByCodeReq();
  GetAccessTokenByCodeRsp::default_instance_ = new GetAccessTokenByCodeRsp();
  GetAccessTokenAndBaseInfoByCodeReq::_default_appid_ =
      new ::std::string("10007", 5);
  GetAccessTokenAndBaseInfoByCodeReq::default_instance_ = new GetAccessTokenAndBaseInfoByCodeReq();
  GetAccessTokenAndBaseInfoByCodeRsp::default_instance_ = new GetAccessTokenAndBaseInfoByCodeRsp();
  VerifyAccessTokenReq::_default_appid_ =
      new ::std::string("10007", 5);
  VerifyAccessTokenReq::default_instance_ = new VerifyAccessTokenReq();
  VerifyAccessTokenRsp::default_instance_ = new VerifyAccessTokenRsp();
  GetOpenProfileReq::_default_appid_ =
      new ::std::string("10007", 5);
  GetOpenProfileReq::default_instance_ = new GetOpenProfileReq();
  GetOpenProfileRsp::default_instance_ = new GetOpenProfileRsp();
  GetAccessTokenByCodeReq::default_instance_->InitAsDefaultInstance();
  GetAccessTokenByCodeRsp::default_instance_->InitAsDefaultInstance();
  GetAccessTokenAndBaseInfoByCodeReq::default_instance_->InitAsDefaultInstance();
  GetAccessTokenAndBaseInfoByCodeRsp::default_instance_->InitAsDefaultInstance();
  VerifyAccessTokenReq::default_instance_->InitAsDefaultInstance();
  VerifyAccessTokenRsp::default_instance_->InitAsDefaultInstance();
  GetOpenProfileReq::default_instance_->InitAsDefaultInstance();
  GetOpenProfileRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_account_5fopen_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_account_5fopen_2eproto {
  StaticDescriptorInitializer_account_5fopen_2eproto() {
    protobuf_AddDesc_account_5fopen_2eproto();
  }
} static_descriptor_initializer_account_5fopen_2eproto_;

// ===================================================================

::std::string* GetAccessTokenByCodeReq::_default_appid_ = NULL;
#ifndef _MSC_VER
const int GetAccessTokenByCodeReq::kAccountTypeFieldNumber;
const int GetAccessTokenByCodeReq::kCodeFieldNumber;
const int GetAccessTokenByCodeReq::kAppidFieldNumber;
#endif  // !_MSC_VER

GetAccessTokenByCodeReq::GetAccessTokenByCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_open.GetAccessTokenByCodeReq)
}

void GetAccessTokenByCodeReq::InitAsDefaultInstance() {
}

GetAccessTokenByCodeReq::GetAccessTokenByCodeReq(const GetAccessTokenByCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_open.GetAccessTokenByCodeReq)
}

void GetAccessTokenByCodeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_type_ = 0u;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = const_cast< ::std::string*>(_default_appid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccessTokenByCodeReq::~GetAccessTokenByCodeReq() {
  // @@protoc_insertion_point(destructor:zhibo_open.GetAccessTokenByCodeReq)
  SharedDtor();
}

void GetAccessTokenByCodeReq::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (appid_ != _default_appid_) {
    delete appid_;
  }
  if (this != default_instance_) {
  }
}

void GetAccessTokenByCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccessTokenByCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccessTokenByCodeReq_descriptor_;
}

const GetAccessTokenByCodeReq& GetAccessTokenByCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fopen_2eproto();
  return *default_instance_;
}

GetAccessTokenByCodeReq* GetAccessTokenByCodeReq::default_instance_ = NULL;

GetAccessTokenByCodeReq* GetAccessTokenByCodeReq::New() const {
  return new GetAccessTokenByCodeReq;
}

void GetAccessTokenByCodeReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    account_type_ = 0u;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != _default_appid_) {
        appid_->assign(*_default_appid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccessTokenByCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_open.GetAccessTokenByCodeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 account_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // required string code = 2;
      case 2: {
        if (tag == 18) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // optional string appid = 3 [default = "10007"];
      case 3: {
        if (tag == 26) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "appid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_open.GetAccessTokenByCodeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_open.GetAccessTokenByCodeReq)
  return false;
#undef DO_
}

void GetAccessTokenByCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_open.GetAccessTokenByCodeReq)
  // required uint32 account_type = 1;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_type(), output);
  }

  // required string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string appid = 3 [default = "10007"];
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_open.GetAccessTokenByCodeReq)
}

::google::protobuf::uint8* GetAccessTokenByCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_open.GetAccessTokenByCodeReq)
  // required uint32 account_type = 1;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_type(), target);
  }

  // required string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string appid = 3 [default = "10007"];
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_open.GetAccessTokenByCodeReq)
  return target;
}

int GetAccessTokenByCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account_type = 1;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // required string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string appid = 3 [default = "10007"];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccessTokenByCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccessTokenByCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccessTokenByCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccessTokenByCodeReq::MergeFrom(const GetAccessTokenByCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccessTokenByCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccessTokenByCodeReq::CopyFrom(const GetAccessTokenByCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccessTokenByCodeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetAccessTokenByCodeReq::Swap(GetAccessTokenByCodeReq* other) {
  if (other != this) {
    std::swap(account_type_, other->account_type_);
    std::swap(code_, other->code_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccessTokenByCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccessTokenByCodeReq_descriptor_;
  metadata.reflection = GetAccessTokenByCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccessTokenByCodeRsp::kRetCodeFieldNumber;
const int GetAccessTokenByCodeRsp::kOpenAccountInfoFieldNumber;
#endif  // !_MSC_VER

GetAccessTokenByCodeRsp::GetAccessTokenByCodeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_open.GetAccessTokenByCodeRsp)
}

void GetAccessTokenByCodeRsp::InitAsDefaultInstance() {
  open_account_info_ = const_cast< ::zhibo_account::OpenAccountInfo*>(&::zhibo_account::OpenAccountInfo::default_instance());
}

GetAccessTokenByCodeRsp::GetAccessTokenByCodeRsp(const GetAccessTokenByCodeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_open.GetAccessTokenByCodeRsp)
}

void GetAccessTokenByCodeRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  open_account_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccessTokenByCodeRsp::~GetAccessTokenByCodeRsp() {
  // @@protoc_insertion_point(destructor:zhibo_open.GetAccessTokenByCodeRsp)
  SharedDtor();
}

void GetAccessTokenByCodeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete open_account_info_;
  }
}

void GetAccessTokenByCodeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccessTokenByCodeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccessTokenByCodeRsp_descriptor_;
}

const GetAccessTokenByCodeRsp& GetAccessTokenByCodeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fopen_2eproto();
  return *default_instance_;
}

GetAccessTokenByCodeRsp* GetAccessTokenByCodeRsp::default_instance_ = NULL;

GetAccessTokenByCodeRsp* GetAccessTokenByCodeRsp::New() const {
  return new GetAccessTokenByCodeRsp;
}

void GetAccessTokenByCodeRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    retcode_ = 0u;
    if (has_open_account_info()) {
      if (open_account_info_ != NULL) open_account_info_->::zhibo_account::OpenAccountInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccessTokenByCodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_open.GetAccessTokenByCodeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_account_info;
        break;
      }

      // optional .zhibo_account.OpenAccountInfo open_account_info = 2;
      case 2: {
        if (tag == 18) {
         parse_open_account_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_account_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_open.GetAccessTokenByCodeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_open.GetAccessTokenByCodeRsp)
  return false;
#undef DO_
}

void GetAccessTokenByCodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_open.GetAccessTokenByCodeRsp)
  // required uint32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional .zhibo_account.OpenAccountInfo open_account_info = 2;
  if (has_open_account_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->open_account_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_open.GetAccessTokenByCodeRsp)
}

::google::protobuf::uint8* GetAccessTokenByCodeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_open.GetAccessTokenByCodeRsp)
  // required uint32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional .zhibo_account.OpenAccountInfo open_account_info = 2;
  if (has_open_account_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->open_account_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_open.GetAccessTokenByCodeRsp)
  return target;
}

int GetAccessTokenByCodeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional .zhibo_account.OpenAccountInfo open_account_info = 2;
    if (has_open_account_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_account_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccessTokenByCodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccessTokenByCodeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccessTokenByCodeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccessTokenByCodeRsp::MergeFrom(const GetAccessTokenByCodeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_open_account_info()) {
      mutable_open_account_info()->::zhibo_account::OpenAccountInfo::MergeFrom(from.open_account_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccessTokenByCodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccessTokenByCodeRsp::CopyFrom(const GetAccessTokenByCodeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccessTokenByCodeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_open_account_info()) {
    if (!this->open_account_info().IsInitialized()) return false;
  }
  return true;
}

void GetAccessTokenByCodeRsp::Swap(GetAccessTokenByCodeRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(open_account_info_, other->open_account_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccessTokenByCodeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccessTokenByCodeRsp_descriptor_;
  metadata.reflection = GetAccessTokenByCodeRsp_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GetAccessTokenAndBaseInfoByCodeReq::_default_appid_ = NULL;
#ifndef _MSC_VER
const int GetAccessTokenAndBaseInfoByCodeReq::kAccountTypeFieldNumber;
const int GetAccessTokenAndBaseInfoByCodeReq::kCodeFieldNumber;
const int GetAccessTokenAndBaseInfoByCodeReq::kAppidFieldNumber;
#endif  // !_MSC_VER

GetAccessTokenAndBaseInfoByCodeReq::GetAccessTokenAndBaseInfoByCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
}

void GetAccessTokenAndBaseInfoByCodeReq::InitAsDefaultInstance() {
}

GetAccessTokenAndBaseInfoByCodeReq::GetAccessTokenAndBaseInfoByCodeReq(const GetAccessTokenAndBaseInfoByCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
}

void GetAccessTokenAndBaseInfoByCodeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_type_ = 0u;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = const_cast< ::std::string*>(_default_appid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccessTokenAndBaseInfoByCodeReq::~GetAccessTokenAndBaseInfoByCodeReq() {
  // @@protoc_insertion_point(destructor:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
  SharedDtor();
}

void GetAccessTokenAndBaseInfoByCodeReq::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (appid_ != _default_appid_) {
    delete appid_;
  }
  if (this != default_instance_) {
  }
}

void GetAccessTokenAndBaseInfoByCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccessTokenAndBaseInfoByCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccessTokenAndBaseInfoByCodeReq_descriptor_;
}

const GetAccessTokenAndBaseInfoByCodeReq& GetAccessTokenAndBaseInfoByCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fopen_2eproto();
  return *default_instance_;
}

GetAccessTokenAndBaseInfoByCodeReq* GetAccessTokenAndBaseInfoByCodeReq::default_instance_ = NULL;

GetAccessTokenAndBaseInfoByCodeReq* GetAccessTokenAndBaseInfoByCodeReq::New() const {
  return new GetAccessTokenAndBaseInfoByCodeReq;
}

void GetAccessTokenAndBaseInfoByCodeReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    account_type_ = 0u;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != _default_appid_) {
        appid_->assign(*_default_appid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccessTokenAndBaseInfoByCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 account_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // required string code = 2;
      case 2: {
        if (tag == 18) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // optional string appid = 3 [default = "10007"];
      case 3: {
        if (tag == 26) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "appid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
  return false;
#undef DO_
}

void GetAccessTokenAndBaseInfoByCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
  // required uint32 account_type = 1;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_type(), output);
  }

  // required string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string appid = 3 [default = "10007"];
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
}

::google::protobuf::uint8* GetAccessTokenAndBaseInfoByCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
  // required uint32 account_type = 1;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_type(), target);
  }

  // required string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string appid = 3 [default = "10007"];
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_open.GetAccessTokenAndBaseInfoByCodeReq)
  return target;
}

int GetAccessTokenAndBaseInfoByCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account_type = 1;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // required string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string appid = 3 [default = "10007"];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccessTokenAndBaseInfoByCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccessTokenAndBaseInfoByCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccessTokenAndBaseInfoByCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccessTokenAndBaseInfoByCodeReq::MergeFrom(const GetAccessTokenAndBaseInfoByCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccessTokenAndBaseInfoByCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccessTokenAndBaseInfoByCodeReq::CopyFrom(const GetAccessTokenAndBaseInfoByCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccessTokenAndBaseInfoByCodeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetAccessTokenAndBaseInfoByCodeReq::Swap(GetAccessTokenAndBaseInfoByCodeReq* other) {
  if (other != this) {
    std::swap(account_type_, other->account_type_);
    std::swap(code_, other->code_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccessTokenAndBaseInfoByCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccessTokenAndBaseInfoByCodeReq_descriptor_;
  metadata.reflection = GetAccessTokenAndBaseInfoByCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccessTokenAndBaseInfoByCodeRsp::kRetCodeFieldNumber;
const int GetAccessTokenAndBaseInfoByCodeRsp::kOpenAccountInfoFieldNumber;
const int GetAccessTokenAndBaseInfoByCodeRsp::kOuterProfileFieldNumber;
#endif  // !_MSC_VER

GetAccessTokenAndBaseInfoByCodeRsp::GetAccessTokenAndBaseInfoByCodeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
}

void GetAccessTokenAndBaseInfoByCodeRsp::InitAsDefaultInstance() {
  open_account_info_ = const_cast< ::zhibo_account::OpenAccountInfo*>(&::zhibo_account::OpenAccountInfo::default_instance());
  outer_profile_ = const_cast< ::zhibo_account::OuterProfile*>(&::zhibo_account::OuterProfile::default_instance());
}

GetAccessTokenAndBaseInfoByCodeRsp::GetAccessTokenAndBaseInfoByCodeRsp(const GetAccessTokenAndBaseInfoByCodeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
}

void GetAccessTokenAndBaseInfoByCodeRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  open_account_info_ = NULL;
  outer_profile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccessTokenAndBaseInfoByCodeRsp::~GetAccessTokenAndBaseInfoByCodeRsp() {
  // @@protoc_insertion_point(destructor:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
  SharedDtor();
}

void GetAccessTokenAndBaseInfoByCodeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete open_account_info_;
    delete outer_profile_;
  }
}

void GetAccessTokenAndBaseInfoByCodeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccessTokenAndBaseInfoByCodeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccessTokenAndBaseInfoByCodeRsp_descriptor_;
}

const GetAccessTokenAndBaseInfoByCodeRsp& GetAccessTokenAndBaseInfoByCodeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fopen_2eproto();
  return *default_instance_;
}

GetAccessTokenAndBaseInfoByCodeRsp* GetAccessTokenAndBaseInfoByCodeRsp::default_instance_ = NULL;

GetAccessTokenAndBaseInfoByCodeRsp* GetAccessTokenAndBaseInfoByCodeRsp::New() const {
  return new GetAccessTokenAndBaseInfoByCodeRsp;
}

void GetAccessTokenAndBaseInfoByCodeRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    retcode_ = 0u;
    if (has_open_account_info()) {
      if (open_account_info_ != NULL) open_account_info_->::zhibo_account::OpenAccountInfo::Clear();
    }
    if (has_outer_profile()) {
      if (outer_profile_ != NULL) outer_profile_->::zhibo_account::OuterProfile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccessTokenAndBaseInfoByCodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_account_info;
        break;
      }

      // optional .zhibo_account.OpenAccountInfo open_account_info = 2;
      case 2: {
        if (tag == 18) {
         parse_open_account_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_account_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_outer_profile;
        break;
      }

      // optional .zhibo_account.OuterProfile outer_profile = 3;
      case 3: {
        if (tag == 26) {
         parse_outer_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outer_profile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
  return false;
#undef DO_
}

void GetAccessTokenAndBaseInfoByCodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
  // required uint32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional .zhibo_account.OpenAccountInfo open_account_info = 2;
  if (has_open_account_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->open_account_info(), output);
  }

  // optional .zhibo_account.OuterProfile outer_profile = 3;
  if (has_outer_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->outer_profile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
}

::google::protobuf::uint8* GetAccessTokenAndBaseInfoByCodeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
  // required uint32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional .zhibo_account.OpenAccountInfo open_account_info = 2;
  if (has_open_account_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->open_account_info(), target);
  }

  // optional .zhibo_account.OuterProfile outer_profile = 3;
  if (has_outer_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->outer_profile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_open.GetAccessTokenAndBaseInfoByCodeRsp)
  return target;
}

int GetAccessTokenAndBaseInfoByCodeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional .zhibo_account.OpenAccountInfo open_account_info = 2;
    if (has_open_account_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_account_info());
    }

    // optional .zhibo_account.OuterProfile outer_profile = 3;
    if (has_outer_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outer_profile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccessTokenAndBaseInfoByCodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccessTokenAndBaseInfoByCodeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccessTokenAndBaseInfoByCodeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccessTokenAndBaseInfoByCodeRsp::MergeFrom(const GetAccessTokenAndBaseInfoByCodeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_open_account_info()) {
      mutable_open_account_info()->::zhibo_account::OpenAccountInfo::MergeFrom(from.open_account_info());
    }
    if (from.has_outer_profile()) {
      mutable_outer_profile()->::zhibo_account::OuterProfile::MergeFrom(from.outer_profile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccessTokenAndBaseInfoByCodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccessTokenAndBaseInfoByCodeRsp::CopyFrom(const GetAccessTokenAndBaseInfoByCodeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccessTokenAndBaseInfoByCodeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_open_account_info()) {
    if (!this->open_account_info().IsInitialized()) return false;
  }
  return true;
}

void GetAccessTokenAndBaseInfoByCodeRsp::Swap(GetAccessTokenAndBaseInfoByCodeRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(open_account_info_, other->open_account_info_);
    std::swap(outer_profile_, other->outer_profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccessTokenAndBaseInfoByCodeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccessTokenAndBaseInfoByCodeRsp_descriptor_;
  metadata.reflection = GetAccessTokenAndBaseInfoByCodeRsp_reflection_;
  return metadata;
}


// ===================================================================

::std::string* VerifyAccessTokenReq::_default_appid_ = NULL;
#ifndef _MSC_VER
const int VerifyAccessTokenReq::kAccountTypeFieldNumber;
const int VerifyAccessTokenReq::kAccessTokenFieldNumber;
const int VerifyAccessTokenReq::kOpenIdFieldNumber;
const int VerifyAccessTokenReq::kAppidFieldNumber;
#endif  // !_MSC_VER

VerifyAccessTokenReq::VerifyAccessTokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_open.VerifyAccessTokenReq)
}

void VerifyAccessTokenReq::InitAsDefaultInstance() {
}

VerifyAccessTokenReq::VerifyAccessTokenReq(const VerifyAccessTokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_open.VerifyAccessTokenReq)
}

void VerifyAccessTokenReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_type_ = 0u;
  accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = const_cast< ::std::string*>(_default_appid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyAccessTokenReq::~VerifyAccessTokenReq() {
  // @@protoc_insertion_point(destructor:zhibo_open.VerifyAccessTokenReq)
  SharedDtor();
}

void VerifyAccessTokenReq::SharedDtor() {
  if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accesstoken_;
  }
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (appid_ != _default_appid_) {
    delete appid_;
  }
  if (this != default_instance_) {
  }
}

void VerifyAccessTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyAccessTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyAccessTokenReq_descriptor_;
}

const VerifyAccessTokenReq& VerifyAccessTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fopen_2eproto();
  return *default_instance_;
}

VerifyAccessTokenReq* VerifyAccessTokenReq::default_instance_ = NULL;

VerifyAccessTokenReq* VerifyAccessTokenReq::New() const {
  return new VerifyAccessTokenReq;
}

void VerifyAccessTokenReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    account_type_ = 0u;
    if (has_accesstoken()) {
      if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accesstoken_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != _default_appid_) {
        appid_->assign(*_default_appid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyAccessTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_open.VerifyAccessTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 account_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_accessToken;
        break;
      }

      // required string accessToken = 2;
      case 2: {
        if (tag == 18) {
         parse_accessToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesstoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accesstoken().data(), this->accesstoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accesstoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_openId;
        break;
      }

      // required string openId = 3;
      case 3: {
        if (tag == 26) {
         parse_openId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_appid;
        break;
      }

      // optional string appid = 4 [default = "10007"];
      case 4: {
        if (tag == 34) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "appid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_open.VerifyAccessTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_open.VerifyAccessTokenReq)
  return false;
#undef DO_
}

void VerifyAccessTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_open.VerifyAccessTokenReq)
  // required uint32 account_type = 1;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_type(), output);
  }

  // required string accessToken = 2;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accesstoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accesstoken(), output);
  }

  // required string openId = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->openid(), output);
  }

  // optional string appid = 4 [default = "10007"];
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_open.VerifyAccessTokenReq)
}

::google::protobuf::uint8* VerifyAccessTokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_open.VerifyAccessTokenReq)
  // required uint32 account_type = 1;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_type(), target);
  }

  // required string accessToken = 2;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accesstoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accesstoken(), target);
  }

  // required string openId = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->openid(), target);
  }

  // optional string appid = 4 [default = "10007"];
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_open.VerifyAccessTokenReq)
  return target;
}

int VerifyAccessTokenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account_type = 1;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // required string accessToken = 2;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesstoken());
    }

    // required string openId = 3;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string appid = 4 [default = "10007"];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyAccessTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyAccessTokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyAccessTokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyAccessTokenReq::MergeFrom(const VerifyAccessTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_accesstoken()) {
      set_accesstoken(from.accesstoken());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyAccessTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyAccessTokenReq::CopyFrom(const VerifyAccessTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyAccessTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VerifyAccessTokenReq::Swap(VerifyAccessTokenReq* other) {
  if (other != this) {
    std::swap(account_type_, other->account_type_);
    std::swap(accesstoken_, other->accesstoken_);
    std::swap(openid_, other->openid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyAccessTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyAccessTokenReq_descriptor_;
  metadata.reflection = VerifyAccessTokenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyAccessTokenRsp::kRetCodeFieldNumber;
const int VerifyAccessTokenRsp::kUnionIdFieldNumber;
#endif  // !_MSC_VER

VerifyAccessTokenRsp::VerifyAccessTokenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_open.VerifyAccessTokenRsp)
}

void VerifyAccessTokenRsp::InitAsDefaultInstance() {
}

VerifyAccessTokenRsp::VerifyAccessTokenRsp(const VerifyAccessTokenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_open.VerifyAccessTokenRsp)
}

void VerifyAccessTokenRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyAccessTokenRsp::~VerifyAccessTokenRsp() {
  // @@protoc_insertion_point(destructor:zhibo_open.VerifyAccessTokenRsp)
  SharedDtor();
}

void VerifyAccessTokenRsp::SharedDtor() {
  if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unionid_;
  }
  if (this != default_instance_) {
  }
}

void VerifyAccessTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyAccessTokenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyAccessTokenRsp_descriptor_;
}

const VerifyAccessTokenRsp& VerifyAccessTokenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fopen_2eproto();
  return *default_instance_;
}

VerifyAccessTokenRsp* VerifyAccessTokenRsp::default_instance_ = NULL;

VerifyAccessTokenRsp* VerifyAccessTokenRsp::New() const {
  return new VerifyAccessTokenRsp;
}

void VerifyAccessTokenRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    retcode_ = 0u;
    if (has_unionid()) {
      if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyAccessTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_open.VerifyAccessTokenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_unionId;
        break;
      }

      // optional string unionId = 2;
      case 2: {
        if (tag == 18) {
         parse_unionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unionid().data(), this->unionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unionid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_open.VerifyAccessTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_open.VerifyAccessTokenRsp)
  return false;
#undef DO_
}

void VerifyAccessTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_open.VerifyAccessTokenRsp)
  // required uint32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string unionId = 2;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_open.VerifyAccessTokenRsp)
}

::google::protobuf::uint8* VerifyAccessTokenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_open.VerifyAccessTokenRsp)
  // required uint32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string unionId = 2;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_open.VerifyAccessTokenRsp)
  return target;
}

int VerifyAccessTokenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string unionId = 2;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyAccessTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyAccessTokenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyAccessTokenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyAccessTokenRsp::MergeFrom(const VerifyAccessTokenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyAccessTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyAccessTokenRsp::CopyFrom(const VerifyAccessTokenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyAccessTokenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VerifyAccessTokenRsp::Swap(VerifyAccessTokenRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(unionid_, other->unionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyAccessTokenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyAccessTokenRsp_descriptor_;
  metadata.reflection = VerifyAccessTokenRsp_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GetOpenProfileReq::_default_appid_ = NULL;
#ifndef _MSC_VER
const int GetOpenProfileReq::kAccountTypeFieldNumber;
const int GetOpenProfileReq::kAccessTokenFieldNumber;
const int GetOpenProfileReq::kOpenIdFieldNumber;
const int GetOpenProfileReq::kAppidFieldNumber;
#endif  // !_MSC_VER

GetOpenProfileReq::GetOpenProfileReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_open.GetOpenProfileReq)
}

void GetOpenProfileReq::InitAsDefaultInstance() {
}

GetOpenProfileReq::GetOpenProfileReq(const GetOpenProfileReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_open.GetOpenProfileReq)
}

void GetOpenProfileReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_type_ = 0u;
  accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = const_cast< ::std::string*>(_default_appid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOpenProfileReq::~GetOpenProfileReq() {
  // @@protoc_insertion_point(destructor:zhibo_open.GetOpenProfileReq)
  SharedDtor();
}

void GetOpenProfileReq::SharedDtor() {
  if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accesstoken_;
  }
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (appid_ != _default_appid_) {
    delete appid_;
  }
  if (this != default_instance_) {
  }
}

void GetOpenProfileReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOpenProfileReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOpenProfileReq_descriptor_;
}

const GetOpenProfileReq& GetOpenProfileReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fopen_2eproto();
  return *default_instance_;
}

GetOpenProfileReq* GetOpenProfileReq::default_instance_ = NULL;

GetOpenProfileReq* GetOpenProfileReq::New() const {
  return new GetOpenProfileReq;
}

void GetOpenProfileReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    account_type_ = 0u;
    if (has_accesstoken()) {
      if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accesstoken_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != _default_appid_) {
        appid_->assign(*_default_appid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOpenProfileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_open.GetOpenProfileReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 account_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_accessToken;
        break;
      }

      // required string accessToken = 2;
      case 2: {
        if (tag == 18) {
         parse_accessToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesstoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accesstoken().data(), this->accesstoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accesstoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_openId;
        break;
      }

      // optional string openId = 3;
      case 3: {
        if (tag == 26) {
         parse_openId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_appid;
        break;
      }

      // optional string appid = 4 [default = "10007"];
      case 4: {
        if (tag == 34) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "appid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_open.GetOpenProfileReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_open.GetOpenProfileReq)
  return false;
#undef DO_
}

void GetOpenProfileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_open.GetOpenProfileReq)
  // required uint32 account_type = 1;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_type(), output);
  }

  // required string accessToken = 2;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accesstoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accesstoken(), output);
  }

  // optional string openId = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->openid(), output);
  }

  // optional string appid = 4 [default = "10007"];
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_open.GetOpenProfileReq)
}

::google::protobuf::uint8* GetOpenProfileReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_open.GetOpenProfileReq)
  // required uint32 account_type = 1;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_type(), target);
  }

  // required string accessToken = 2;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accesstoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accesstoken(), target);
  }

  // optional string openId = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->openid(), target);
  }

  // optional string appid = 4 [default = "10007"];
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_open.GetOpenProfileReq)
  return target;
}

int GetOpenProfileReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account_type = 1;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // required string accessToken = 2;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesstoken());
    }

    // optional string openId = 3;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string appid = 4 [default = "10007"];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOpenProfileReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOpenProfileReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOpenProfileReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOpenProfileReq::MergeFrom(const GetOpenProfileReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_accesstoken()) {
      set_accesstoken(from.accesstoken());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOpenProfileReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOpenProfileReq::CopyFrom(const GetOpenProfileReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOpenProfileReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetOpenProfileReq::Swap(GetOpenProfileReq* other) {
  if (other != this) {
    std::swap(account_type_, other->account_type_);
    std::swap(accesstoken_, other->accesstoken_);
    std::swap(openid_, other->openid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOpenProfileReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOpenProfileReq_descriptor_;
  metadata.reflection = GetOpenProfileReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOpenProfileRsp::kRetCodeFieldNumber;
const int GetOpenProfileRsp::kOuterProfileFieldNumber;
#endif  // !_MSC_VER

GetOpenProfileRsp::GetOpenProfileRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhibo_open.GetOpenProfileRsp)
}

void GetOpenProfileRsp::InitAsDefaultInstance() {
  outerprofile_ = const_cast< ::zhibo_account::OuterProfile*>(&::zhibo_account::OuterProfile::default_instance());
}

GetOpenProfileRsp::GetOpenProfileRsp(const GetOpenProfileRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zhibo_open.GetOpenProfileRsp)
}

void GetOpenProfileRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  outerprofile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOpenProfileRsp::~GetOpenProfileRsp() {
  // @@protoc_insertion_point(destructor:zhibo_open.GetOpenProfileRsp)
  SharedDtor();
}

void GetOpenProfileRsp::SharedDtor() {
  if (this != default_instance_) {
    delete outerprofile_;
  }
}

void GetOpenProfileRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOpenProfileRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOpenProfileRsp_descriptor_;
}

const GetOpenProfileRsp& GetOpenProfileRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fopen_2eproto();
  return *default_instance_;
}

GetOpenProfileRsp* GetOpenProfileRsp::default_instance_ = NULL;

GetOpenProfileRsp* GetOpenProfileRsp::New() const {
  return new GetOpenProfileRsp;
}

void GetOpenProfileRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    retcode_ = 0u;
    if (has_outerprofile()) {
      if (outerprofile_ != NULL) outerprofile_->::zhibo_account::OuterProfile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOpenProfileRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhibo_open.GetOpenProfileRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_outerProfile;
        break;
      }

      // optional .zhibo_account.OuterProfile outerProfile = 2;
      case 2: {
        if (tag == 18) {
         parse_outerProfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outerprofile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhibo_open.GetOpenProfileRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhibo_open.GetOpenProfileRsp)
  return false;
#undef DO_
}

void GetOpenProfileRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhibo_open.GetOpenProfileRsp)
  // required uint32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional .zhibo_account.OuterProfile outerProfile = 2;
  if (has_outerprofile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outerprofile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhibo_open.GetOpenProfileRsp)
}

::google::protobuf::uint8* GetOpenProfileRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhibo_open.GetOpenProfileRsp)
  // required uint32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional .zhibo_account.OuterProfile outerProfile = 2;
  if (has_outerprofile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->outerprofile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhibo_open.GetOpenProfileRsp)
  return target;
}

int GetOpenProfileRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional .zhibo_account.OuterProfile outerProfile = 2;
    if (has_outerprofile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outerprofile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOpenProfileRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOpenProfileRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOpenProfileRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOpenProfileRsp::MergeFrom(const GetOpenProfileRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_outerprofile()) {
      mutable_outerprofile()->::zhibo_account::OuterProfile::MergeFrom(from.outerprofile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOpenProfileRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOpenProfileRsp::CopyFrom(const GetOpenProfileRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOpenProfileRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetOpenProfileRsp::Swap(GetOpenProfileRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(outerprofile_, other->outerprofile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOpenProfileRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOpenProfileRsp_descriptor_;
  metadata.reflection = GetOpenProfileRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zhibo_open

// @@protoc_insertion_point(global_scope)
